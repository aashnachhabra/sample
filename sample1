 else if (totalTiers == 2 && tierPlans.get(0).getTierNumber() == 1 && tierPlans.get(1).getTierNumber() == 2) {
						benefitIndicator = "TIERED";
						Double individualDed = getDedAmt(tierPlans.get(0).getIndividualDed());
						Double familyDed = getDedAmt(tierPlans.get(0).getFamilyDed());
						int tierNumber = tierPlans.get(0).getTierNumber().intValue();
						medDedList = savePLDed(benefitIndicator, individualDed, familyDed, medDeductObj, userName, tierNumber, medDedList, pdpdId);

						Double individualDedT2 = getDedAmt(tierPlans.get(1).getIndividualDed());
						Double familyDedT2 = getDedAmt(tierPlans.get(1).getFamilyDed());
						int tierNumberT2 = tierPlans.get(1).getTierNumber().intValue();
						medDedList = savePLDed(benefitIndicator, individualDedT2, familyDedT2, medDeductObj, userName, tierNumberT2, medDedList, pdpdId);
					}
i have this code and in condition else if (totalTiers == 2 && tierPlans.get(0).getTierNumber() == 1 && tierPlans.get(1).getTierNumber() == 2) {
						benefitIndicator = "TIERED";
i want the first savePLded unchanged and i do not want the next saveplded instead i want to create a similar saveplded which accepts the plDedID of the first save and pldedid of next save entry should be same rest of the function should also be logically same they just need to have same pldedid
private List<PlDedPdpdIdDTO> savePLDed(String benefitIndicator, Double individualDed, Double familyDed, MedicalDeductible medDeductObj, String userName, int tierNumber, List<PlDedPdpdIdDTO> medDedList, String pdpdId) {
		if (individualDed != null && familyDed != null) {
			PlDedPdpdIdDTO plDedPdpdIdDTO = new PlDedPdpdIdDTO();
			PlDed plDed = new PlDed();
			plDed.setEmbeddedType(medDeductObj.getEmbeddedType());
			plDed.setRxDedType(medDeductObj.getRxDedType());
			plDed.setCrossApplies(medDeductObj.getCrossApplies());
			if(null != medDeductObj.getCarryover() && !medDeductObj.getCarryover().trim().isEmpty())plDed.setCarryover(Integer.parseInt(medDeductObj.getCarryover()));
			plDed.setTierNumber(tierNumber);
			plDed.setIndividualDed(individualDed.intValue());
			plDed.setFamilyDed(familyDed.intValue());
			plDed.setCreatedBy(userName);
			plDed.setBenefitIndicator(benefitIndicator);
			plDed.setCreatedOn(DateUtil.getCurrentDateToFormat("yyyy-MM-dd HH:mm:ss"));
			plDed.setIsCurrent(Constants.ISCURRENT);
			plDedPdpdIdDTO.setPlDed(plDed);
			plDedPdpdIdDTO.setPdpdId(pdpdId);
			medDedList.add(plDedPdpdIdDTO);
		}
		return medDedList;
	}

package com.uhc.ei.abb.abbDb.domain;

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.uhc.ei.abb.mongodb.domain.TierPlans;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Table(name = "plded", schema = "automatedbenefitbuilder")
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Data
public class PlDed implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "plDedID", unique = true, nullable = false)
    private Integer plDedID;
	
	@Column(name = "embeddedType")
    private String embeddedType;
	
	@Column(name = "rxDedType")
    private String rxDedType;
	
	@Column(name = "crossApplies")
    private Integer crossApplies;
	
	@Column(name = "carryover")
    private Integer carryover;
	
	@Column(name = "tierNumber")
    private Integer tierNumber;
	
	@Column(name = "individualDed")
    private Integer individualDed;
	
	@Column(name = "familyDed")
    private Integer familyDed;
	
	@Column(name = "createdBy")
    private String createdBy;

    @Column(name = "createdOn")
    private Date createdOn;

    @Column(name = "modifiedBy")
    private String modifiedBy;

    @Column(name = "modifiedOn")
    private String modifiedOn;

    @Column(name = "isCurrent")
    private Boolean isCurrent;

	@Column(name = "benefitIndicator")
	private String benefitIndicator;

	 @Override
	 public boolean equals(Object o) {
	     if (this == o) return true;
	     if (o == null || getClass() != o.getClass()) return false;
	     PlDed p = (PlDed) o;
	     return Objects.equals(tierNumber, p.tierNumber) && Objects.equals(individualDed, p.individualDed)
	    		   &&  Objects.equals(familyDed, p.familyDed) &&  Objects.equals(rxDedType, p.rxDedType)
				 && Objects.equals(benefitIndicator, p.benefitIndicator);
	 }
	 @Override
	 public int hashCode() {
	 return Objects.hash(tierNumber, individualDed,familyDed,rxDedType);

	 }
}
