 public String processQuery(String query) {
        ExecutorService executorService = Executors.newFixedThreadPool(valueConfig.getPoolSize());
        List<Future<String>> futures = new ArrayList<>();
        /** TRANSFORMING QUERY */
        if (valueConfig.getQueryTransformation().equals(Boolean.TRUE)) {
            query = queryTransformationService.transformQuery(query);
        }
        final String finalQuery = query;
        /** FETCHING QUERY CONTEXT FROM VECTOR DB */
        List<String> relatedDocumentation = documentService.getClosestDocumentsAccordingToQuery(finalQuery);
        /** PROCESSING IN PARALLEL */
        int batchSize = valueConfig.getBatchSize();
        for (int i = 0; i < relatedDocumentation.size(); i += batchSize) {
            List<String> batch = relatedDocumentation.subList(i, Math.min(i + batchSize, relatedDocumentation.size()));
            Callable<String> task = () -> {
                /** Generate context for the current batch */
                String contextBasedOnquery = getRelatedDocumentationBasedOnTokenLimit(batch);
                /** Prepare requestMsg within the lambda */
                List<Message> requestMsg = new ArrayList<>();
                requestMsg.add(Message.builder().role(Constants.USER).content(finalQuery).build());
                if (!CollectionUtils.isEmpty(batch)) {
                    requestMsg.add(Message.builder().role(Constants.ASSISTANT).content(contextBasedOnquery).build());
                }
                /** Create ChatGPTRequest */
                ChatGPTRequest chatGPTRequest = ChatGPTRequest.builder()
                        .messages(requestMsg)
                        .build();
                /** Process request and return response */
                Message chatResponse = chatBotAssistant.processRequest(chatGPTRequest);
                return chatResponse.getContent();
            };
            /** Submit task to ExecutorService */
            futures.add(executorService.submit(task));
        }
        /** COLLECTING INTERMEDIATE RESPONSES */
        List<String> intermediateResponses = new ArrayList<>();
        for (Future<String> future : futures) {
            try {
                intermediateResponses.add(future.get()); // Blocks until task completes
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
        /** FINAL PROCESSING OF INTERMEDIATE RESPONSES */
        executorService.shutdown();
        String finalContext = String.join("\n", intermediateResponses);
        /** Create final request message */
        List<Message> finalRequestMsg = new ArrayList<>();
        finalRequestMsg.add(Message.builder().role(Constants.USER).content(finalQuery).build());
        finalRequestMsg.add(Message.builder().role(Constants.ASSISTANT).content(finalContext).build());
        finalRequestMsg.add(Message.builder().role(Constants.SYSTEM).content(Prompts.COMBINING_PROMPT).build());
        ChatGPTRequest finalChatGPTRequest = ChatGPTRequest.builder()
                .messages(finalRequestMsg)
                .build();
        /** GETTING FINAL RESPONSE AND STORING RESPONSE IN SESSION */
        Message finalChatResponse = chatBotAssistant.processRequest(finalChatGPTRequest);
        return finalChatResponse.getContent();
    }

do in this code i want to log the files that are being processed in the batches and what the response was of each batch. Please add logger or sys out statements to relevant parts of this function
