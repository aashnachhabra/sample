  private String processIntermediateResponses(List<String> responses) {
        System.out.println("Responses size " + responses.size());
        // Base case: if only one response remains, return it
        if (responses.size() == 1) {
            return responses.get(0);
        }
        ExecutorService executorService = Executors.newFixedThreadPool(valueConfig.getPoolSize());
        List<Future<String>> futures = new ArrayList<>();
        // Process responses in pairs
        for (int i = 0; i < responses.size(); i += 2) {
            String response1 = responses.get(i);
            String response2 = (i + 1 < responses.size()) ? responses.get(i + 1) : null; // Handle odd number of responses
            Callable<String> task = () -> {
                // Prepare request messages
                List<Message> requestMsg = new ArrayList<>();
                requestMsg.add(Message.builder().role(Constants.ASSISTANT).content(response1).build());
                if (response2 != null) {
                    requestMsg.add(Message.builder().role(Constants.ASSISTANT).content(response2).build());
                }
                requestMsg.add(Message.builder().role(Constants.SYSTEM).content(Prompts.COMBINING_PROMPT).build());
                // Create ChatGPTRequest
                ChatGPTRequest chatGPTRequest = ChatGPTRequest.builder()
                        .messages(requestMsg)
                        .build();
                // Process request and return response
                Message chatResponse = chatBotAssistant.processRequest(chatGPTRequest);
                System.out.println("Recursive response: " + chatResponse.getContent());
                return chatResponse.getContent();
            };
            futures.add(executorService.submit(task));
        }
        // Collect responses from the futures
        List<String> nextLevelResponses = new ArrayList<>();
        for (Future<String> future : futures) {
            try {
                nextLevelResponses.add(future.get());
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
        executorService.shutdown();
        // Recur with the next level of responses
        return processIntermediateResponses(nextLevelResponses);
    }
in this function if responses size is 3, how many times should                 System.out.println("Recursive response: " + chatResponse.getContent()); print in console?
