package com.optum.cirrus.isl.altusgenie.utils;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.optum.cirrus.isl.altusgenie.model.v1.CodeDocument;
import com.optum.cirrus.isl.altusgenie.service.DocumentService;
import lombok.AllArgsConstructor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@AllArgsConstructor
public class MethodExtractor {

    private static final String METHOD_REGEX = "\\w+\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*\\}";
    private static DocumentService documentService;
    public static List<String> extractMethods(String javaFileContent) {
        List<String> methods = new ArrayList<>();
        String[] chunks = javaFileContent.split("\\b(public|protected|private|static)\\b");
        for (String chunk : chunks) {
            // Skip chunks that contain class or interface definitions
            if (chunk.contains("class") || chunk.contains("interface")) {
                continue;
            }
            // Check if the chunk matches the method pattern
            if (chunk.contains("(") && chunk.contains(")") && chunk.contains("{") && chunk.contains("}")) {
                methods.add(chunk);
            }
        }

        return methods;
    }
    public static void main(String[] args) {
        List<CodeDocument> codeDocuments = documentService.getAllDocuments();
        Integer cnt =0;
        for(CodeDocument codeDocument : codeDocuments) {
            String javaFileContent = codeDocument.getCode();
            System.out.println("filename"+codeDocument.getFileName());
            List<String> methods = extractMethods(javaFileContent);
            for (String method : methods) {
                System.out.println(method);
                System.out.println("--------------------------------------------------");
            }
            cnt++;
            if(cnt>=5) {
                break;
            }
        }
    }
}


can u implement the extracting here using java parser or any other chunking library
