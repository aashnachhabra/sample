  public String downloadSPGChangeReport(HttpServletRequest request, HttpServletResponse response, Model model, Integer batchId) throws Exception {

        IFPSPGBatchManagement ifpSpgBatchManagement  = ifpSPGBatchMangementRepository.findByBatchIdAndIsCurrent(batchId, Constants.isCurrentTrue);

        String fileName=	ifpSpgBatchManagement.getFileName();
        String filePath=null;
        String status = ifpSpgBatchManagement.getStatus();
        SpgBatchStatus batchStatus = SpgBatchStatus.fromString(status);
        switch (batchStatus) {
            case COMPLETED:
                filePath = nasDrivePath + "SPGChangeReports" + File.separator + "Completed";
                break;
            case QUEUED:
                filePath = nasDrivePath + "SPGChangeReports" + File.separator + "Queued";
                break;
            case REJECTED:
            case FAILED:
                filePath = nasDrivePath + "SPGChangeReports" + File.separator + "Failed";
                break;
            case IN_PROGRESS:
                filePath = nasDrivePath + "SPGChangeReports" + File.separator + "In Progress";
                break;
            case READY_FOR_REVIEW:
                filePath = nasDrivePath + "SPGChangeReports" + File.separator + ifpSpgBatchManagement.getCocSeries().iterator().next();
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + batchStatus);
        }
        response.setContentType("application/octet-stream");
        response.setHeader("Content-disposition", "attachment;filename=" + fileName);

        byte[] fileBytes=null;
        if(!fileName.isEmpty()) {
            File srcFile = getFileFromNasDrive(fileName, filePath);
            if (srcFile != null) {
                InputStream inputStream = null;
                fileBytes = Files.readAllBytes(srcFile.toPath());

                if (fileBytes.length > 0) {
                    try {
                        inputStream = new ByteArrayInputStream(fileBytes);
                        DataOutputStream os = new DataOutputStream(response.getOutputStream());
                        response.setHeader("Content-Length", String.valueOf(fileBytes.length));
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = inputStream.read(buffer)) > 0) {
                            os.write(buffer, 0, len);
                        }
                    } catch (Exception e) {
                        logger.error(e.getLocalizedMessage(), e);
                        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
                    } finally {

                        if (inputStream != null) {
                            inputStream.close();
                        }
                    }
                }
            }
        }
        else {
            response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
        }


        return "Success";

    }

write groovy test case for this serviceimpl function also
