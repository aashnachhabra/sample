package com.uhc.ei.planlibrary.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@ConfigurationProperties(prefix = "spring.data.mongodb")
public class MongoSettingsProperties {

	private String uri;
	private List<String> address;
	private String replicaSet;
	private String database;
	private String username;
	private String password;
	private Integer minConnectionsPerHost = 0;
	private Integer maxConnectionsPerHost = 100;
	private Integer threadsAllowedToBlockForConnectionMultiplier = 5;
	private Integer serverSelectionTimeout = 30000;
	private Integer maxWaitTime = 120000;
	private Integer maxConnectionIdleTime = 0;
	private Integer maxConnectionLifeTime = 0;
	private Integer connectTimeout = 10000;
	private Integer socketTimeout = 0;
	private Boolean socketKeepAlive = false;
	private Boolean sslEnabled = false;
	private Boolean sslInvalidHostNameAllowed = false;
	private Boolean alwaysUseMBeans = false;
	private Integer heartbeatConnectTimeout = 20000;
	private Integer heartbeatSocketTimeout = 20000;
	private Integer minHeartbeatFrequency = 500;
	private Integer heartbeatFrequency = 10000;
	private Integer localThreshold = 15;
	private String authenticationDatabase;


	public List<String> getAddress() {
		return address;
	}
	public void setAddress(List<String> address) {
		this.address = address;
	}
	public String getReplicaSet() {
		return replicaSet;
	}
	public void setReplicaSet(String replicaSet) {
		this.replicaSet = replicaSet;
	}
	public String getDatabase() {
		return database;
	}
	public void setDatabase(String database) {
		this.database = database;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public Integer getMinConnectionsPerHost() {
		return minConnectionsPerHost;
	}
	public void setMinConnectionsPerHost(Integer minConnectionsPerHost) {
		this.minConnectionsPerHost = minConnectionsPerHost;
	}
	public Integer getMaxConnectionsPerHost() {
		return maxConnectionsPerHost;
	}
	public void setMaxConnectionsPerHost(Integer maxConnectionsPerHost) {
		this.maxConnectionsPerHost = maxConnectionsPerHost;
	}
	public Integer getThreadsAllowedToBlockForConnectionMultiplier() {
		return threadsAllowedToBlockForConnectionMultiplier;
	}
	public void setThreadsAllowedToBlockForConnectionMultiplier(Integer threadsAllowedToBlockForConnectionMultiplier) {
		this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;
	}
	public Integer getServerSelectionTimeout() {
		return serverSelectionTimeout;
	}
	public void setServerSelectionTimeout(Integer serverSelectionTimeout) {
		this.serverSelectionTimeout = serverSelectionTimeout;
	}
	public Integer getMaxWaitTime() {
		return maxWaitTime;
	}
	public void setMaxWaitTime(Integer maxWaitTime) {
		this.maxWaitTime = maxWaitTime;
	}
	public Integer getMaxConnectionIdleTime() {
		return maxConnectionIdleTime;
	}
	public void setMaxConnectionIdleTime(Integer maxConnectionIdleTime) {
		this.maxConnectionIdleTime = maxConnectionIdleTime;
	}
	public Integer getMaxConnectionLifeTime() {
		return maxConnectionLifeTime;
	}
	public void setMaxConnectionLifeTime(Integer maxConnectionLifeTime) {
		this.maxConnectionLifeTime = maxConnectionLifeTime;
	}
	public Integer getConnectTimeout() {
		return connectTimeout;
	}
	public void setConnectTimeout(Integer connectTimeout) {
		this.connectTimeout = connectTimeout;
	}
	public Integer getSocketTimeout() {
		return socketTimeout;
	}
	public void setSocketTimeout(Integer socketTimeout) {
		this.socketTimeout = socketTimeout;
	}
	public Boolean getSocketKeepAlive() {
		return socketKeepAlive;
	}
	public void setSocketKeepAlive(Boolean socketKeepAlive) {
		this.socketKeepAlive = socketKeepAlive;
	}
	public Boolean getSslEnabled() {
		return sslEnabled;
	}
	public void setSslEnabled(Boolean sslEnabled) {
		this.sslEnabled = sslEnabled;
	}
	public Boolean getSslInvalidHostNameAllowed() {
		return sslInvalidHostNameAllowed;
	}
	public void setSslInvalidHostNameAllowed(Boolean sslInvalidHostNameAllowed) {
		this.sslInvalidHostNameAllowed = sslInvalidHostNameAllowed;
	}
	public Boolean getAlwaysUseMBeans() {
		return alwaysUseMBeans;
	}
	public void setAlwaysUseMBeans(Boolean alwaysUseMBeans) {
		this.alwaysUseMBeans = alwaysUseMBeans;
	}
	public Integer getHeartbeatConnectTimeout() {
		return heartbeatConnectTimeout;
	}
	public void setHeartbeatConnectTimeout(Integer heartbeatConnectTimeout) {
		this.heartbeatConnectTimeout = heartbeatConnectTimeout;
	}
	public Integer getHeartbeatSocketTimeout() {
		return heartbeatSocketTimeout;
	}
	public void setHeartbeatSocketTimeout(Integer heartbeatSocketTimeout) {
		this.heartbeatSocketTimeout = heartbeatSocketTimeout;
	}
	public Integer getMinHeartbeatFrequency() {
		return minHeartbeatFrequency;
	}
	public void setMinHeartbeatFrequency(Integer minHeartbeatFrequency) {
		this.minHeartbeatFrequency = minHeartbeatFrequency;
	}
	public Integer getHeartbeatFrequency() {
		return heartbeatFrequency;
	}
	public void setHeartbeatFrequency(Integer heartbeatFrequency) {
		this.heartbeatFrequency = heartbeatFrequency;
	}
	public Integer getLocalThreshold() {
		return localThreshold;
	}
	public void setLocalThreshold(Integer localThreshold) {
		this.localThreshold = localThreshold;
	}
	public String getAuthenticationDatabase() {
		return authenticationDatabase;
	}
	public void setAuthenticationDatabase(String authenticationDatabase) {
		this.authenticationDatabase = authenticationDatabase;
	}

	public String getUri() {
		return uri;
	}

	public void setUri(String uri) {
		this.uri = uri;
	}
}

package com.uhc.ei.planlibrary.config;

import com.mongodb.MongoClientSettings;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoClients;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.mongodb.MongoDatabaseFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.SimpleMongoClientDatabaseFactory;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.util.StringUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

@Configuration
@EnableTransactionManagement
@EnableMongoRepositories(basePackages = {"com.uhc.ei.planlibrary.mongodb.domain",
        "com.uhc.ei.planlibrary.mongodb.repo"}, mongoTemplateRef = "mongoTemplate")
public class MongoDbConfig {

    private static final Logger logger = LoggerFactory.getLogger(MongoDbConfig.class);

    // Override the default MongoDbFacotry Bean in the container
    @Bean("mongoDbFactory")
    @Autowired
    @Primary
    public MongoDatabaseFactory mongoDbFactory(MongoSettingsProperties properties) {
        // connection authentication
        if (!StringUtils.hasText(properties.getUri())){
            MongoCredential mongoCredential = null;
            if (properties.getUsername() != null) {
                mongoCredential = MongoCredential.createScramSha1Credential(properties.getUsername(),
                        properties.getAuthenticationDatabase() != null ? properties.getAuthenticationDatabase()
                                : properties.getDatabase(),
                        properties.getPassword().toCharArray());
            }

            List<ServerAddress> serverAddresses = new ArrayList<ServerAddress>();
            for (String address : properties.getAddress()) {
                String[] hostAndPort = address.split(":");
                String host = hostAndPort[0];
                Integer port = Integer.parseInt(hostAndPort[1]);
                ServerAddress serverAddress = new ServerAddress(host, port);
                serverAddresses.add(serverAddress);
            }
            MongoClientSettings settings = MongoClientSettings.builder().credential(mongoCredential)

                    .applyToSocketSettings(
                            builder -> builder.readTimeout(properties.getSocketTimeout().intValue(), TimeUnit.MILLISECONDS)
                                    .connectTimeout(properties.getConnectTimeout().intValue(), TimeUnit.MILLISECONDS))
                    .applyToClusterSettings(builder -> builder
                            .hosts(serverAddresses)
                            .requiredReplicaSetName(properties.getReplicaSet()))
                    .build();


            com.mongodb.client.MongoClient mongoClient= MongoClients.create(settings);

            MongoDatabaseFactory mongoDbFactory = new SimpleMongoClientDatabaseFactory(mongoClient,  properties.getDatabase());
            return mongoDbFactory;
        }
        return new SimpleMongoClientDatabaseFactory(MongoClients.create(properties.getUri()), properties.getDatabase());
    }

    @Bean(name = "mongoTemplate")
    @Primary
    public MongoTemplate mongoTemplate(@Qualifier("mongoDbFactory") MongoDatabaseFactory mongoDatabaseFactory) {
        return new MongoTemplate(mongoDatabaseFactory);
    }
}


here are the files please suggest what could be causing the error
