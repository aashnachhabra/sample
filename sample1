package com.uhc.ei.abb.abbDb.domain;

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import com.uhc.ei.abb.mongodb.domain.TierPlans;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Table(name = "plded", schema = "automatedbenefitbuilder")
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Data
public class PlDed implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "plDedID", unique = true, nullable = false)
    private Integer plDedID;
	
	@Column(name = "embeddedType")
    private String embeddedType;
	
	@Column(name = "rxDedType")
    private String rxDedType;
	
	@Column(name = "crossApplies")
    private Integer crossApplies;
	
	@Column(name = "carryover")
    private Integer carryover;
	
	@Column(name = "tierNumber")
    private Integer tierNumber;
	
	@Column(name = "individualDed")
    private Integer individualDed;
	
	@Column(name = "familyDed")
    private Integer familyDed;
	
	@Column(name = "createdBy")
    private String createdBy;

    @Column(name = "createdOn")
    private Date createdOn;

    @Column(name = "modifiedBy")
    private String modifiedBy;

    @Column(name = "modifiedOn")
    private String modifiedOn;

    @Column(name = "isCurrent")
    private Boolean isCurrent;

	@Column(name = "benefitIndicator")
	private String benefitIndicator;

	 @Override
	 public boolean equals(Object o) {
	     if (this == o) return true;
	     if (o == null || getClass() != o.getClass()) return false;
	     PlDed p = (PlDed) o;
	     return Objects.equals(tierNumber, p.tierNumber) && Objects.equals(individualDed, p.individualDed)
	    		   &&  Objects.equals(familyDed, p.familyDed) &&  Objects.equals(rxDedType, p.rxDedType)
				 && Objects.equals(benefitIndicator, p.benefitIndicator);
	 }
	 @Override
	 public int hashCode() {
	 return Objects.hash(tierNumber, individualDed,familyDed,rxDedType);

	 }
}

this is pl ded how t handle this
