import { Component, Input, OnInit, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { SharedModule } from 'src/app/shared/shared.module';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { FieldManagementService } from 'src/app/shared/services/field-management/field-management.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { SpinnerService } from 'src/app/shared/services/spinner.service';
import { ToastService } from 'src/app/shared/services/toast.service';
import { Subscription } from 'rxjs';
import { Store } from '@ngrx/store';
import { getSelectedFieldDetails, RootReducerState } from 'src/app/ngrx/reducers';
import { faMinusSquare } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'app-edit-field-management',
  templateUrl: './edit-field-management.component.html',
  standalone: true,
  imports: [SharedModule, FontAwesomeModule, CommonModule, FormsModule],
})
export class EditFieldManagementComponent implements OnInit {
  @Input() fieldData: any;
  selectedFieldId: any;
  isSubmitted = false;
  fieldDetailSub!: Subscription;
  allFieldDetailSub!: Subscription
  allFieldData: any;
  filteredSelectedFieldData: any
  fieldName: any
  sectionHeader: any
  questionHeader: any
  productHeader: any
  selectedInputFieldType: any;
  fieldHelpText: any
  selectedFields: any
  textBoxOptionName: any
  modifiedBy: any;
  modifiedOn: any;
  dropDownOptions = false;
  checkBoxOptions = false;
  radioButtonOptions = false;
  updatedFieldManagement: any = {}
  selectedFieldType = '';
  display = false;
  faMinusSquare = faMinusSquare;
  constructor(public activeModal: NgbActiveModal,
    private spinnerService: SpinnerService,
    private toastService: ToastService,
    public fieldManagementService: FieldManagementService,
    private store: Store<RootReducerState>
  ) { }
  selectedField = ''
  ngOnInit(): void {
    this.fieldDetailSub = this.store
      .select(getSelectedFieldDetails)
      .subscribe((data: any) => {
        if (data) {
          this.filteredSelectedFieldData = data
        }
      });
    this.fieldData = this.filteredSelectedFieldData
    this.fieldHelpText = this.filteredSelectedFieldData.fieldHelpText
    this.fieldName = this.filteredSelectedFieldData.fieldName
    this.sectionHeader = this.filteredSelectedFieldData.sectionHeader
    this.productHeader = this.filteredSelectedFieldData.productHeader
    this.questionHeader = this.filteredSelectedFieldData.questionHeader
    this.selectedInputFieldType = this.filteredSelectedFieldData.textBoxOptions?.textBoxOptionName
    if (this.fieldData.isTextBox == true)
      this.selectedFieldType = 'Textbox';
    else if (this.fieldData.isTextArea == true)
      this.selectedFieldType = 'Textarea';
    else if (this.fieldData.isCheckBox == true) {
      this.selectedFieldType = 'Checkbox'
      this.checkBoxOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.checkBoxOptionsList]
    }
    else if (this.fieldData.isRadioButton == true) {
      this.selectedFieldType = 'Radio Button'
      this.radioButtonOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.radioButtonOptionsList]
    }
    else if (this.fieldData.isDropDown == true) {
      this.selectedFieldType = 'Dropdown'
      this.dropDownOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.dropDownOptionsList]
    }

  }
  ngOnDestroy() {
    if (this.fieldDetailSub) this.fieldDetailSub.unsubscribe();
  }
  options: string[] = [
    'Textbox',
    'Textarea',
    'Dropdown',
    'Checkbox',
    'Radio Button',
  ];
  boxOptions: string[] = [
    'Text',
    'Date',
    'Email',
    'URL',
    'Number',
    'Range',
    'Password',
    'Telephone Number',
    'Time',
    'File',
    'Currency'
  ]

  onSelectedFieldType(value: string): void {
    this.selectedFieldType = value;
    if (this.selectedFieldType == 'Textbox') {
      this.fieldData = { ...this.fieldData, isTextBox: true }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: '' } }
      this.display = true;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Textarea') {
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: true }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Dropdown') {
      if (this.dropDownOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: true }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.dropDownOptions = true;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Checkbox') {
      if (this.checkBoxOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: true }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.checkBoxOptions = true;
      this.radioButtonOptions = false;
      this.dropDownOptions = false;
    }
    else if (this.selectedFieldType == 'Radio Button') {
      if (this.radioButtonOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: true }
      this.display = false;
      this.radioButtonOptions = true;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
    }
  }
  onSelectedInputFieldOption(value: string): void {
    this.selectedInputFieldType = value;
    if (this.selectedFieldType == 'Textbox') {
      this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.selectedInputFieldType } }
    }
    else if (this.selectedFieldType == 'Dropdown') {
      this.fieldData = { ...this.fieldData, dropdownOptionsList: [...this.optionsArray] }
    }
    else if (this.selectedFieldType == 'Checkbox') {
      this.fieldData = { ...this.fieldData, checkBoxOptionsList: [...this.optionsArray] }
    }
    else if (this.selectedFieldType == 'Radio Button') {
      this.fieldData = { ...this.fieldData, radioButtonOptionsList: [...this.optionsArray] }
    }
  }
  public optionsArray: Array<any> = [];
  public deletedOptionsArray: Array<any> = [];
  addedDropdownOptions = {
    dropDownOptionName: '',
    isCurrent: true
  }
  addedCheckboxOptions = {
    checkBoxOptionName: '',
    isCurrent: true
  }
  addedRadiobuttonOptions = {
    radioButtonOptionName: '',
    isCurrent: true
  }
  addFieldValue() {
    if (this.dropDownOptions) {
      this.optionsArray.push(this.addedDropdownOptions)
      this.addedDropdownOptions = {
        dropDownOptionName: '',
        isCurrent: true
      }
    }
    else if (this.checkBoxOptions) {
      this.optionsArray.push(this.addedCheckboxOptions)
      this.addedCheckboxOptions = {
        checkBoxOptionName: '',
        isCurrent: true
      }
    }
    else if (this.radioButtonOptions) {
      this.optionsArray.push(this.addedRadiobuttonOptions)
      this.addedRadiobuttonOptions = {
        radioButtonOptionName: '',
        isCurrent: true
      }
    }
  }
  deleteFieldValue(index: number) {
    const updatedOption = { ...this.optionsArray[index], isCurrent: false };
    this.deletedOptionsArray.push(updatedOption);
    this.optionsArray[index] = updatedOption;
    this.optionsArray.splice(index, 1);
  }
  updateField() {
    if (!this.isValidForm()) {
      return;
    }
    this.spinnerService.showSpinner();
    if (this.selectedFieldType == 'Textbox')
      this.updatedFieldManagement = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.fieldData.textBoxOptions.textBoxOptionName }, fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader }
    else if (this.selectedFieldType == 'Checkbox')
      this.updatedFieldManagement = { ...this.fieldData, checkBoxOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader }
    else if (this.selectedFieldType == 'Dropdown')
      this.updatedFieldManagement = { ...this.fieldData, dropDownOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader }
    else if (this.selectedFieldType == 'Radio Button')
      this.updatedFieldManagement = { ...this.fieldData, radioButtonOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader }
    else
      this.updatedFieldManagement = { ...this.fieldData, fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader }
    this.fieldManagementService.updateField(this.fieldData.fieldID, this.updatedFieldManagement)
      .subscribe(() => {
        this.toastService.showSuccess(`"${this.fieldData.fieldName}" was modified successfully.`);
        this.activeModal.close({ isGetApiCallNeeded: true, fieldName: this.fieldData.fieldName });
      })
    this.isSubmitted = true
  }
  isValidForm(): boolean {
    if (this.fieldName &&
      this.fieldHelpText &&
      this.sectionHeader &&
      this.questionHeader &&
      this.productHeader &&
      (this.fieldData.isTextArea || this.fieldData.isTextBox || this.optionsArray.length) &&
      ((this.fieldData.isTextBox && this.fieldData.textBoxOptions.textBoxOptionName) ||
        !this.fieldData.isTextBox)) {
      return true;
    }
    else {
      return false;
    }

  }
}



<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title">Edit Field</h5>
        <button type="button" class="btn-close" aria-label="Close" (click)="activeModal.dismiss()"></button>
    </div>
    <div class="modal-body">
        <div class="row">
            <div class="col">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" #fieldNameModel="ngModel" id="fieldName" placeholder="Enter Field Name Here..." [(ngModel)]="fieldName" name="fieldName" required />
                    <label for="fieldName">Field Name <span class="text-danger">*</span></label
          >
          <div
            *ngIf="
              fieldNameModel.invalid && (fieldNameModel.touched || isSubmitted)
            "
            class="error-message text-danger"
          >
            <div *ngIf="fieldHelpTextModel.errors?.['required']">
              Field Name is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <textarea
            class="form-control"
            placeholder="Enter Field Help Text Here..."
            id="fieldHelpText"
            style="height: 100px"
            [(ngModel)]="fieldHelpText"
            #fieldHelpTextModel="ngModel"
            name="fieldHelpText"
            title="Required"
            required
          ></textarea>
          <label for="fieldHelpText"
            >Field Help Text <span class="text-danger">*</span></label
          >
          <div
            *ngIf="
              fieldHelpTextModel.invalid &&
              (fieldHelpTextModel.touched || isSubmitted)
            "
            class="error-message text-danger"
          >
            <div *ngIf="fieldHelpTextModel.errors?.['required']">
              Field Help Text is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <input
            type="text"
            class="form-control"
            #sectionHeaderModel="ngModel"
            id="sectionHeader"
            placeholder="Enter Section Header Here..."
            [(ngModel)]="sectionHeader"
            name="sectionHeader"
            required
          />
          <label for="sectionHeader"
            >Section Header <span class="text-danger">*</span></label
          >
          <div
            *ngIf="
              sectionHeaderModel.invalid &&
              (sectionHeaderModel.touched || isSubmitted)
            "
            class="error-message text-danger"
          >
            <div *ngIf="sectionHeaderModel.errors?.['required']">
              Section Header is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <input
            type="text"
            class="form-control"
            id="questionHeader"
            placeholder="Enter Question Header Here..."
            [(ngModel)]="questionHeader"
            #questionHeaderModel="ngModel"
            name="questionHeader"
            required
          />
          <label for="questionHeader"
            >Question Header <span class="text-danger">*</span></label
          >
          <div
            *ngIf="
              questionHeaderModel.invalid &&
              (questionHeaderModel.touched || isSubmitted)
            "
            class="error-message text-danger"
          >
            <div *ngIf="questionHeaderModel.errors?.['required']">
              Question Header is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating">
          <input
            type="text"
            class="form-control"
            id="productHeader"
            placeholder="Enter Product Header Here..."
            [(ngModel)]="productHeader"
            #productHeaderModel="ngModel"
            name="productHeader"
            required
          />
          <label for="productHeader"
            >Product Header <span class="text-danger">*</span></label
          >
          <div
            *ngIf="
              productHeaderModel.invalid &&
              (productHeaderModel.touched || isSubmitted)
            "
            class="error-message text-danger"
          >
            <div *ngIf="productHeaderModel.errors?.['required']">
              Product Header is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row" style="padding-top: 1em">
      <div class="col">
        <div class="form-floating">
          <select
            #fieldType
            (change)="onSelectedFieldType(selectedFieldType)"
            class="form-select"
            id="fieldType"
            aria-label="Field Type"
            [(ngModel)]="selectedFieldType"
          >
            <option value="" disabled>Select...</option>
            <option *ngFor="let option of options" [value]="option">
              {{ option }}
            </option>
          </select>
          <label for="fieldType">Field Type</label>
                </div>
            </div>
        </div>
        <div class="row" style="padding-top: 1em" *ngIf="selectedFieldType == 'Textbox'">
            <div class="col">
                <div class="form-floating">
                    <select #textBoxOptionName class="form-select" id="textBoxOptionName" aria-label="Field Type" name="textBoxType" title="Required" required [(ngModel)]="selectedInputFieldType" (change)="onSelectedInputFieldOption(selectedInputFieldType)">
            <option value="" disabled>Select...</option>
            <option *ngFor="let option of boxOptions" [value]="option">
              {{ option }}
            </option>
          </select>
                    <label for="textBoxOptionName">Textbox Type</label>
                </div>
            </div>
        </div>
        <div *ngIf="dropDownOptions" class="row" >
          <div class="col">
              <div class="form-floating">
                  <div *ngFor="let option of optionsArray; let i = index" style="margin-top: 1em; margin-bottom: -25px" class="optionDiv">
                      <input type="text" class="form-control" [(ngModel)]="option.dropDownOptionName" #dropDownOptionModel="ngModel" style="width: 30em;" placeholder="Enter DropDown Option Here...">
                      <button type="button" class="btn" (click)="deleteFieldValue(i)" style="margin-top:-65px;margin-left: 475px ;color: red;" ><fa-icon [icon]="faMinusSquare"  ></fa-icon></button>
                  </div>
                  <button class="btn" type="button"  (click)="addFieldValue()" style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);" >Add Dropdown Option</button>
              </div>
          </div>
      </div>
      <div *ngIf="checkBoxOptions" class="row" >
        <div class="col">
            <div class="form-floating">
                <div *ngFor="let option of optionsArray; let i = index" style="margin-top: 1em ;margin-bottom: -25px"class="optionDiv">
                    <input type="text" class="form-control" [(ngModel)]="option.checkBoxOptionName" #checkBoxOptionModel="ngModel" style="width: 30em;" placeholder="Enter Checkbox Option Here...">
                    <button type="button" class="btn" (click)="deleteFieldValue(i)" style="margin-top:-65px;margin-left: 475px ;color: red;" ><fa-icon [icon]="faMinusSquare"  ></fa-icon></button>
                </div>
                <button class="btn" type="button"  (click)="addFieldValue()" style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);" >Add Checkbox Option</button>
            </div>
        </div>
    </div>
    <div *ngIf="radioButtonOptions" class="row" >
      <div class="col">
          <div class="form-floating">
              <div *ngFor="let option of optionsArray; let i = index" style="margin-top: 1em ;margin-bottom: -25px" class="optionDiv">
                  <input type="text" class="form-control" [(ngModel)]="option.radioButtonOptionName" #radioButtonOptionModel="ngModel" style="width: 30em;" placeholder="Enter Radio Button Option Here...">
                  <button type="button" class="btn" (click)="deleteFieldValue(i)" style="margin-top:-65px;margin-left: 475px ;color: red;" ><fa-icon [icon]="faMinusSquare"  ></fa-icon></button>
              </div>
              <button class="btn" type="button"  (click)="addFieldValue()" style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);" >Add Radio Button Option</button>
          </div>
      </div>
  </div>

        <div class="row" style="padding-top: 1em">
            <div class="col-6">
                <label for="modifiedBy" class="form-label">Modified By</label>
                <input type="text" class="form-control" id="modifiedBy" [(ngModel)]="fieldData.modifiedBy" disabled="" />
            </div>
            <div class="col-6">
                <label for="modifiedOn" class="form-label">Modified On</label>
                <input type="text" class="form-control" id="modifiedOn" [(ngModel)]="fieldData.modifiedOn" disabled="" />
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" (click)="activeModal.dismiss()">
      Close
    </button>
        <button type="button" class="btn btn-success" (click)="updateField()" style="color: white" [disabled]="!isValidForm()">
      Save
    </button>
    </div>
</div>
