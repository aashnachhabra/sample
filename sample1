<div class="modal-content">
  <div class="modal-header">
    <h5 class="modal-title">Edit Field</h5>
    <button type="button" class="btn-close" aria-label="Close" (click)="activeModal.dismiss()"></button>
  </div>
  <div class="modal-body">
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <input type="text" class="form-control" #fieldNameModel="ngModel" id="fieldName"
            placeholder="Enter Field Name Here..." [(ngModel)]="fieldName" name="fieldName" required />
          <label for="fieldName">Field Name <span class="text-danger">*</span></label>
          <div *ngIf="
            fieldNameModel.invalid && (fieldNameModel.touched || isSubmitted)
          " class="error-message text-danger">
            <div *ngIf="fieldHelpTextModel.errors?.['required']">
              Field Name is required
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <textarea class="form-control" placeholder="Enter Field Help Text Here..." id="fieldHelpText"
            style="height: 100px" [(ngModel)]="fieldHelpText" #fieldHelpTextModel="ngModel" name="fieldHelpText"
            title="Required" required></textarea>
          <label for="fieldHelpText">Field Help Text</label>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <input type="text" class="form-control" #sectionHeaderModel="ngModel" id="sectionHeader"
            placeholder="Enter Section Header Here..." [(ngModel)]="sectionHeader" name="sectionHeader" />
          <label for="sectionHeader">Section Header</label>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="questionHeader" placeholder="Enter Question Header Here..."
            [(ngModel)]="questionHeader" #questionHeaderModel="ngModel" name="questionHeader" />
          <label for="questionHeader">Question Header </label>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating">
          <input type="text" class="form-control" id="productHeader" placeholder="Enter Product Header Here..."
            [(ngModel)]="productHeader" #productHeaderModel="ngModel" name="productHeader" />
          <label for="productHeader">Product Header</label>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="form-floating mt-3">
          <input class="form-control" id="deactivationDate" placeholder="yyyy-mm-dd" [(ngModel)]="deactivationDate"
            #deactivationDateModel="ngModel" name="d" ngbDatepicker #d="ngbDatepicker">
          <label for="deactivationDate">Date of Deactivation</label>
          <button class="btn btn-outline-secondary bi bi-calendar3"
            style="position: absolute;right:10px;top:50%;transform: translateY(-50%);" (click)="d.toggle()"
            type="button"></button>
        </div>
      </div>
    </div>
    <div class="row" style="padding-top: 1em">
      <div class="col">
        <div class="form-floating">
          <select #fieldType (change)="onSelectedFieldType(selectedFieldType)" class="form-select" id="fieldType"
            aria-label="Field Type" [(ngModel)]="selectedFieldType">
            <option value="" disabled>Select...</option>
            <option *ngFor="let option of options" [value]="option">
              {{ option }}
            </option>
          </select>
          <label for="fieldType">Field Type<span class="text-danger">*</span></label>
        </div>
      </div>
    </div>
    <div class="row" style="padding-top: 1em" *ngIf="selectedFieldType == 'Textbox'">
      <div class="col">
        <div class="form-floating">
          <select #textBoxOptionName class="form-select" id="textBoxOptionName" aria-label="Field Type"
            name="textBoxType" title="Required" required [(ngModel)]="selectedInputFieldType"
            (change)="onSelectedInputFieldOption(selectedInputFieldType)">
            <option value="" disabled>Select...</option>
            <option *ngFor="let option of boxOptions" [value]="option">
              {{ option }}
            </option>
          </select>
          <label for="textBoxOptionName">Textbox Type</label>
        </div>
      </div>
    </div>
    <div *ngIf="selectedInputFieldType == 'Text (with label)' || selectedInputFieldType == 'Text (without label)' " class="row" style="padding-top: 1em">
      <div class="col">
          <div class="form-floating">
              <input type="text" class="form-control" id="defaultText"
                  placeholder="Enter Default Text Here..." [(ngModel)]="defaultText"
                  #defaultTextModel="ngModel" name="defaultText" />
              <label for="defaultText">Default Text</label>
          </div>
      </div>
  </div>
  <div *ngIf="selectedInputFieldType == 'Text (with label)' || selectedInputFieldType == 'Text (without label)' " class="row" style="padding-top: 1em">
    <div class="col">
        <div class="form-check form-switch">
            <label for="isEditable">Editable?</label>
            <input class="form-check-input" type="checkbox" role="switch" name="isEditable" [(ngModel)]="isEditable">
        </div>
    </div>
</div>
    <div *ngIf="dropDownOptions" class="row">
      <div class="col">
        <div class="form-floating">
          <div *ngFor="let option of optionsArray; let i = index,trackBy: trackByFn"
            style="margin-top: 1em; margin-bottom: 10px" class="optionDiv row align-items-center">
            <div class="col-md-1">
              <input type="radio" id="default" name="default" class="form-check-input" [checked]="option.isDefault"
                (change)="setDefaultDropdownOption(option)">
            </div>
            <div class="col-md-6" style="padding-left:0">
              <input type="text" class="form-control" [(ngModel)]="option.dropDownOptionName"
                [ngModelOptions]="{updateOn: 'change'}" (ngModelChange)="onInputChange($event,i)"
                #dropDownOptionModel="ngModel" placeholder="Enter DropDown Option Here...">
            </div>
            <div class="col-md-1" style="padding-left:0">
              <button type="button" class="btn" (click)="deleteFieldValue(i)" style="color: red;">
                <fa-icon [icon]="faMinusSquare"></fa-icon>
              </button>
            </div>
          </div>
          <div class="row">
            <div class="col-md-12">
              <button class="btn" type="button" (click)="addFieldValue()"
                style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);">Add Dropdown
                Option</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div *ngIf="checkBoxOptions" class="row">
      <div class="col">
        <div class="form-floating">
          <div *ngFor="let option of optionsArray; let i = index; trackBy: trackByFn"
            style="margin-top: 1em ;margin-bottom: 10px" class="optionDiv row align-items-center">
            <div class="col-md-1">
              <input type="checkbox" id="default" name="default" class="form-check-input" [checked]="option.isDefault"
                (change)="setDefaultCheckboxOption(option)">
            </div>
            <div class="col-md-6" style="padding-left:0">
              <input type="text" class="form-control" [(ngModel)]="option.checkBoxOptionName"
                [ngModelOptions]="{updateOn: 'change'}" (ngModelChange)="onInputChange($event,i)"
                placeholder="Enter Checkbox Option Here...">
            </div>
            <div class="col-md-1" style="padding-left:0">
              <button type="button" class="btn" (click)="deleteFieldValue(i)" style="color: red;">
                <fa-icon [icon]="faMinusSquare"></fa-icon>
              </button>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <button class="btn" type="button" (click)="addFieldValue()"
              style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);">Add Checkbox
              Option</button>
          </div>
        </div>
      </div>
    </div>
    <div *ngIf="radioButtonOptions" class="row">
      <div class="col">
        <div class="form-floating">
          <div *ngFor="let option of optionsArray; let i = index; trackBy: trackByFn"
            style="margin-top: 1em ;margin-bottom: 10px" class="optionDiv row align-items-center">
            <div class="col-md-1">
              <input type="radio" id="default" name="default" class="form-check-input" [checked]="option.isDefault"
                (change)="setDefaultRadioOption(option)">
            </div>
            <div class="col-md-6" style="padding-left:0">
              <input type="text" class="form-control" [(ngModel)]="option.radioButtonOptionName"
                [ngModelOptions]="{updateOn: 'change'}" (ngModelChange)="onInputChange($event,i)"
                #radioButtonOptionModel="ngModel" placeholder="Enter Radio Button Option Here...">
            </div>
            <div class="col-md-1" style="padding-left:0">
              <button type="button" class="btn" (click)="deleteFieldValue(i)" style="color: red;">
                <fa-icon [icon]="faMinusSquare"></fa-icon>
              </button>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <button class="btn" type="button" (click)="addFieldValue()"
              style="margin-top: 1em; color:white; background-color: rgba(255, 179, 0, 0.916);">Add Radio Button
              Option</button>
          </div>
        </div>
      </div>
    </div>
    <div class="row" style="padding-top: 1em">
      <div class="col-6">
        <label for="modifiedBy" class="form-label">Modified By</label>
        <input type="text" class="form-control" id="modifiedBy" [(ngModel)]="fieldData.modifiedBy" disabled="" />
      </div>
      <div class="col-6">
        <label for="modifiedOn" class="form-label">Modified On</label>
        <input type="text" class="form-control" id="modifiedOn" [(ngModel)]="fieldData.modifiedOn" disabled="" />
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" (click)="activeModal.dismiss()">
        Close
      </button>
      <button type="button" class="btn btn-success" (click)="updateField()" style="color: white"
        [disabled]="!isValidForm()">
        Save
      </button>
    </div>
  </div>
</div>

import { Component, Input, OnInit, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { SharedModule } from 'src/app/shared/shared.module';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { FieldManagementService } from 'src/app/shared/services/field-management/field-management.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { SpinnerService } from 'src/app/shared/services/spinner.service';
import { ToastService } from 'src/app/shared/services/toast.service';
import { Subscription } from 'rxjs';
import { Store } from '@ngrx/store';
import { getSelectedFieldDetails, RootReducerState } from 'src/app/ngrx/reducers';
import { faMinusSquare } from '@fortawesome/free-solid-svg-icons';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { formatDate } from '@angular/common';

@Component({
  selector: 'app-edit-field-management',
  templateUrl: './edit-field-management.component.html',
  standalone: true,
  imports: [SharedModule, FontAwesomeModule, CommonModule, FormsModule, NgbModule],
})
export class EditFieldManagementComponent implements OnInit {
  @Input() fieldData: any;
  selectedFieldId: any;
  displayDefault = false
  isEditable:any;
  defaultText = ''
  isSubmitted = false;
  fieldDetailSub!: Subscription;
  allFieldDetailSub!: Subscription
  allFieldData: any;
  filteredSelectedFieldData: any
  fieldName: any
  sectionHeader: any
  questionHeader: any
  productHeader: any
  deactivationDate: any;
  selectedInputFieldType: any;
  fieldHelpText: any
  selectedFields: any
  textBoxOptionName: any
  modifiedBy: any;
  modifiedOn: any;
  dropDownOptions = false;
  checkBoxOptions = false;
  radioButtonOptions = false;
  updatedFieldManagement: any = {}
  selectedFieldType = '';
  display = false;
  faMinusSquare = faMinusSquare;
  constructor(public activeModal: NgbActiveModal,
    private spinnerService: SpinnerService,
    private toastService: ToastService,
    public fieldManagementService: FieldManagementService,
    private store: Store<RootReducerState>
  ) { }
  selectedField = ''
  ngOnInit(): void {
    this.fieldDetailSub = this.store
      .select(getSelectedFieldDetails)
      .subscribe((data: any) => {
        if (data) {
          this.filteredSelectedFieldData = data
        }
      });
    this.fieldData = this.filteredSelectedFieldData
    this.fieldHelpText = this.filteredSelectedFieldData.fieldHelpText
    this.fieldName = this.filteredSelectedFieldData.fieldName
    this.sectionHeader = this.filteredSelectedFieldData.sectionHeader
    this.productHeader = this.filteredSelectedFieldData.productHeader
    this.questionHeader = this.filteredSelectedFieldData.questionHeader
    this.deactivationDate = this.mapToDate(this.filteredSelectedFieldData.deactivationDate)
    this.selectedInputFieldType = this.filteredSelectedFieldData.textBoxOptions?.textBoxOptionName
    this.defaultText = this.filteredSelectedFieldData.textBoxOptions?.defaultText
    this.isEditable = this.filteredSelectedFieldData.textBoxOptions?.isEditable
    console.log(this.isEditable)
    if (this.fieldData.isTextBox == true)
      this.selectedFieldType = 'Textbox';
    else if (this.fieldData.isTextArea == true)
      this.selectedFieldType = 'Textarea';
    else if (this.fieldData.isCheckBox == true) {
      this.selectedFieldType = 'Checkbox'
      this.checkBoxOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.checkBoxOptionsList]
    }
    else if (this.fieldData.isRadioButton == true) {
      this.selectedFieldType = 'Radio Button'
      this.radioButtonOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.radioButtonOptionsList]
    }
    else if (this.fieldData.isDropDown == true) {
      this.selectedFieldType = 'Dropdown'
      this.dropDownOptions = true
      this.optionsArray = [...this.filteredSelectedFieldData.dropDownOptionsList]
    }
  }
  onOptionChange(newValue: string, option: any) {
    const index = this.optionsArray.findIndex(opt => opt.checkBoxOptionName === option.checkBoxOptionName)
  }
  updateOptionVal(option: any, index: any, newValue: any) {
    this.optionsArray = [
      ...this.optionsArray.slice(0, index),
      { ...option, checkBoxOptionName: newValue },
      ...this.optionsArray.slice(index + 1)
    ]
  }
  ngOnDestroy() {
    if (this.fieldDetailSub) this.fieldDetailSub.unsubscribe();
  }
  options: string[] = [
    'Textbox',
    'Textarea',
    'Dropdown',
    'Checkbox',
    'Radio Button',
  ];
  boxOptions: string[] = [
    'Text (with label)',
    'Text (without label)',
    'Date',
    'Email',
    'URL',
    'Number',
    'Range',
    'Password',
    'Telephone Number',
    'Time',
    'File',
    'Currency'
  ]
  setDefaultDropdownOption(option: any) {
    this.optionsArray = this.optionsArray.map((item: any) => ({
      ...item,
      isDefault: false,
    }));
    const index = this.optionsArray.findIndex((item: any) => item.dropDownOptionName === option.dropDownOptionName);
    if (index !== -1) {
      const updatedOption = { ...option, isDefault: true };
      this.optionsArray[index] = updatedOption;
    }
  }
  setDefaultRadioOption(option: any) {
    this.optionsArray = this.optionsArray.map((item: any) => ({
      ...item,
      isDefault: false,
    }));
    const index = this.optionsArray.findIndex((item: any) => item.dropDownOptionName === option.dropDownOptionName);
    if (index !== -1) {
      const updatedOption = { ...option, isDefault: true };
      this.optionsArray[index] = updatedOption;
    }
  }
  setDefaultCheckboxOption(option: any) {
    const index = this.optionsArray.findIndex((item: any) => item.checkBoxOptionName === option.checkBoxOptionName);
    if (index !== -1) {
      const updatedOption = { ...option, isDefault: !option.isDefault };
      this.optionsArray[index] = updatedOption;
    }
  }
  onSelectedFieldType(value: string): void {
    this.selectedFieldType = value;
    if (this.selectedFieldType == 'Textbox') {
      this.fieldData = { ...this.fieldData, isTextBox: true }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      if(this.selectedInputFieldType == 'Text (with label)' || this.selectedInputFieldType == 'Text (without label)' )
      this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: '', isEditable: false, defaultText: ' ' } }
      else
      this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: '' } }
      this.display = true;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Textarea') {
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: true }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Dropdown') {
      if (this.dropDownOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: true }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.dropDownOptions = true;
      this.checkBoxOptions = false;
      this.radioButtonOptions = false;
    }
    else if (this.selectedFieldType == 'Checkbox') {
      if (this.checkBoxOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: true }
      this.fieldData = { ...this.fieldData, isRadioButton: false }
      this.display = false;
      this.checkBoxOptions = true;
      this.radioButtonOptions = false;
      this.dropDownOptions = false;
    }
    else if (this.selectedFieldType == 'Radio Button') {
      if (this.radioButtonOptions == false)
        this.optionsArray.splice(0, this.optionsArray.length)
      this.fieldData = { ...this.fieldData, isTextBox: false }
      this.fieldData = { ...this.fieldData, isTextArea: false }
      this.fieldData = { ...this.fieldData, isDropDown: false }
      this.fieldData = { ...this.fieldData, isCheckBox: false }
      this.fieldData = { ...this.fieldData, isRadioButton: true }
      this.display = false;
      this.radioButtonOptions = true;
      this.dropDownOptions = false;
      this.checkBoxOptions = false;
    }
  }
  onSelectedInputFieldOption(value: string): void {
    this.selectedInputFieldType = value;
    console.log(this.selectedInputFieldType)
    if (this.selectedFieldType == 'Textbox') {
      if (this.selectedInputFieldType == 'Text (with label)' || this.selectedInputFieldType == 'Text (without label)') {
        this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.selectedInputFieldType, isEditable: this.isEditable, defaultText: this.defaultText } }
        console.log(this.fieldData)
      }
      else
        this.fieldData = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.selectedInputFieldType } }
    }
    else if (this.selectedFieldType == 'Dropdown') {
      this.fieldData = { ...this.fieldData, dropdownOptionsList: [...this.optionsArray] }
    }
    else if (this.selectedFieldType == 'Checkbox') {
      this.fieldData = { ...this.fieldData, checkBoxOptionsList: [...this.optionsArray] }
    }
    else if (this.selectedFieldType == 'Radio Button') {
      this.fieldData = { ...this.fieldData, radioButtonOptionsList: [...this.optionsArray] }
    }
  }
  public optionsArray: Array<any> = [];
  public deletedOptionsArray: Array<any> = [];
  addedDropdownOptions = {
    dropDownOptionName: '',
    isCurrent: true
  }
  addedCheckboxOptions = {
    checkBoxOptionName: '',
    isCurrent: true
  }
  addedRadiobuttonOptions = {
    radioButtonOptionName: '',
    isCurrent: true
  }
  addFieldValue() {
    if (this.dropDownOptions) {
      this.optionsArray.push(this.addedDropdownOptions)
      this.addedDropdownOptions = {
        dropDownOptionName: '',
        isCurrent: true
      }
    }
    else if (this.checkBoxOptions) {
      this.optionsArray.push(this.addedCheckboxOptions)
      this.addedCheckboxOptions = {
        checkBoxOptionName: '',
        isCurrent: true
      }
    }
    else if (this.radioButtonOptions) {
      this.optionsArray.push(this.addedRadiobuttonOptions)
      this.addedRadiobuttonOptions = {
        radioButtonOptionName: '',
        isCurrent: true
      }
    }
  }
  onInputChange(event: any, index: number) {
    if (event == "") {
      let addedDropdownOptions = {
        dropDownOptionName: event,
        isCurrent: false
      }
      let addedCheckBoxOptions = {
        checkBoxOptionName: event,
        isCurrent: false
      }
      let addedRadioButtonOptions = {
        radioButtonOptionName: event,
        isCurrent: false
      }
      if (this.dropDownOptions)
        this.optionsArray[index] = addedDropdownOptions
      else if (this.radioButtonOptions)
        this.optionsArray[index] = addedRadioButtonOptions
      else if (this.checkBoxOptions)
        this.optionsArray[index] = addedCheckBoxOptions
    }
    else {
      let addedDropdownOptions = {
        dropDownOptionName: event,
        isCurrent: true
      }
      let addedCheckBoxOptions = {
        checkBoxOptionName: event,
        isCurrent: true
      }
      let addedRadioButtonOptions = {
        radioButtonOptionName: event,
        isCurrent: true
      }
      if (this.dropDownOptions)
        this.optionsArray[index] = addedDropdownOptions
      else if (this.radioButtonOptions)
        this.optionsArray[index] = addedRadioButtonOptions
      else if (this.checkBoxOptions)
        this.optionsArray[index] = addedCheckBoxOptions
    }
  }

  deleteFieldValue(index: number) {
    const updatedOption = { ...this.optionsArray[index], isCurrent: false };
    this.deletedOptionsArray.push(updatedOption);
    this.optionsArray[index] = updatedOption;
    this.optionsArray.splice(index, 1);
  }
  updateField() {
    if (!this.isValidForm()) {
      return;
    }
    this.spinnerService.showSpinner();
    if (this.selectedFieldType == 'Textbox') {
      this.deactivationDate = this.formatDatefordisplay(this.deactivationDate)
      if(this.selectedInputFieldType == 'Text (with label)' || this.selectedInputFieldType == 'Text (without label)'){
        console.log(this.updatedFieldManagement)
        this.updatedFieldManagement = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.fieldData.textBoxOptions.textBoxOptionName , isEditable : this.fieldData.textBoxOptions.isEditable , defaultText:this.fieldData.textBoxOptions.defaultText }, fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
      }
      else
      this.updatedFieldManagement = { ...this.fieldData, textBoxOptions: { textBoxOptionName: this.fieldData.textBoxOptions.textBoxOptionName }, fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
    }
    else if (this.selectedFieldType == 'Checkbox') {
      this.deactivationDate = this.formatDatefordisplay(this.deactivationDate)
      this.updatedFieldManagement = { ...this.fieldData, checkBoxOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
    }
    else if (this.selectedFieldType == 'Dropdown') {
      this.deactivationDate = this.formatDatefordisplay(this.deactivationDate)
      this.updatedFieldManagement = { ...this.fieldData, dropDownOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
    }
    else if (this.selectedFieldType == 'Radio Button') {
      this.deactivationDate = this.formatDatefordisplay(this.deactivationDate)
      this.updatedFieldManagement = { ...this.fieldData, radioButtonOptionsList: [...this.optionsArray, ...this.deletedOptionsArray], fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
    }
    else {
      this.deactivationDate = this.formatDatefordisplay(this.deactivationDate)
      this.updatedFieldManagement = { ...this.fieldData, fieldHelpText: this.fieldHelpText, fieldName: this.fieldName, sectionHeader: this.sectionHeader, questionHeader: this.questionHeader, productHeader: this.productHeader, deactivationDate: this.deactivationDate }
    }
    this.fieldManagementService.updateField(this.fieldData.fieldID, this.updatedFieldManagement)
      .subscribe(() => {
        this.toastService.showSuccess(`"${this.fieldData.fieldName}" was modified successfully.`);
        this.activeModal.close({ isGetApiCallNeeded: true, fieldName: this.fieldData.fieldName });
      })
    this.isSubmitted = true
  }
  private formatDatefordisplay(date: any): any {
    if (date && date.year && date.month && date.day) {
      return formatDate(new Date(date.year, date.month - 1, date.day), 'yyyy-MM-dd', 'en-US')
    }
    return null;
  }
  isValidForm(): boolean {
    if (this.fieldName &&
      (this.fieldData.isTextArea || this.fieldData.isTextBox || this.optionsArray.length) &&
      ((this.fieldData.isTextBox && this.fieldData.textBoxOptions.textBoxOptionName) ||
        !this.fieldData.isTextBox)) {
      for (let i = 0; i < this.optionsArray.length; i++) {
        if (this.checkBoxOptions) {
          if (!this.optionsArray[i].checkBoxOptionName)
            return false;
        }
        else if (this.dropDownOptions) {
          if (!this.optionsArray[i].dropDownOptionName)
            return false;
        }
        else if (this.radioButtonOptions) {
          if (!this.optionsArray[i].radioButtonOptionName)
            return false;
        }
      }
      return true;
    }
    else {
      return false;
    }
  }

  trackByFn(index: any, item: any) {
    return index;
  }
  private mapToDate(dateString: any): any {
    if (dateString) {
      const date = new Date(dateString);
      return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
    }
    return '';
  }

}
