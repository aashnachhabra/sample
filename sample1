package com.optum.eni.core.rules.engine.service.impl;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import com.optum.eni.core.rules.engine.event.*;
import com.optum.eni.core.rules.engine.service.ChildRuleApiService;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;
import org.elasticsearch.index.query.Operator;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import com.optum.eni.core.rules.engine.config.stargate.EnvConfigService;
import com.optum.eni.core.rules.engine.coremongodb.domain.ChildRule;
import com.optum.eni.core.rules.engine.coremongodb.repo.ChildRuleRepository;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentAppliesto;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentCocSeries;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentLicense;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentOrganization;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentRule;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.ParentSegment;
import com.optum.eni.core.rules.engine.elasticlibrary.entity.RuleHeaderDetails;
import com.optum.eni.core.rules.engine.model.ChildRuleModel;
import com.optum.eni.core.rules.engine.model.ConditionModel;
import com.optum.eni.core.rules.engine.model.LibrarySearchResult;
import com.optum.eni.core.rules.engine.model.ParentRuleRequest;
import com.optum.eni.core.rules.engine.model.RulesModel;
import com.optum.eni.core.rules.engine.mongodb.domain.ChildValidation;
import com.optum.eni.core.rules.engine.mongodb.domain.FieldValidationMessage;
import com.optum.eni.core.rules.engine.service.CoreConnectorService;

@Component
public class CoreConnectorServiceImpl implements CoreConnectorService {

    private static final Logger logger = LoggerFactory.getLogger(CoreConnectorServiceImpl.class);

    private ObjectMapper mapper = new ObjectMapper();

    private ChildRuleRepository childRuleRepository;

    private static final String NULL_VALUE = "null";

    private static final String BENEFITS = "Benefits";

    private RestHighLevelClient client;

    @Autowired
    ChildRuleApiService childRuleApiService;

    @Value("${ece.index.name}")
    private String eceIndexName;

    @Value("${child.rules.api.url}")
    private String childRulesApiUrl;

    /**
     * Instantiates a new CoreConnector service.
     *
     * @param envConfigService the env config service transformer service
     */
    @Autowired
    public CoreConnectorServiceImpl(RestHighLevelClient client, ChildRuleRepository childRuleRepository) {
        this.client = client;
        this.childRuleRepository = childRuleRepository;
    }

    public CoreConnectorServiceImpl(EnvConfigService envConfigService, RestTemplate restTemplate, ObjectMapper mapper2,
                                    ChildRuleRepository childRuleRepository2) {
        // TODO Auto-generated constructor stub
    }

    @Override
    public List<LibrarySearchResult> fetchParentRules(ParentRuleRequest parentRuleRequest) {

        logger.info("**** Inside fetchParentRules ****");

        return parentRules(parentRuleRequest);
    }

    public List<LibrarySearchResult> parentRules(ParentRuleRequest parentRuleRequest) {

        List<LibrarySearchResult> librarySearchList = new ArrayList<>();

        SearchRequest searchRequest = new SearchRequest();

        searchRequest.indices(eceIndexName);

        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();

        final BoolQueryBuilder finalBoolQuery = new BoolQueryBuilder();

        /**
         * Rupe Type Filter
         */
        BoolQueryBuilder ruleTypeBoolQuery = QueryBuilders.boolQuery();

		/*if (parentRuleRequest.getRuleTypeIn() != null && !parentRuleRequest.getRuleTypeIn().isEmpty()) {

			if (!"0".equals(parentRuleRequest.getRuleTypeIn())) {
				ruleTypeBoolQuery
						.should(QueryBuilders.matchQuery("parentType.parentTypeID", parentRuleRequest.getRuleTypeIn()));
			}
			finalBoolQuery.must(ruleTypeBoolQuery);
		}*/

        MatchQueryBuilder matchNotDeletedQueryBuilder = QueryBuilders.matchQuery("isDeleted", false)
                .operator(Operator.AND);

        finalBoolQuery.must(matchNotDeletedQueryBuilder);

        /**
         * benefitCategory filter
         */

        if (parentRuleRequest.getBenCat() != null && !parentRuleRequest.getBenCat().isEmpty()) {

            BoolQueryBuilder benefitCategoryBoolQuery = QueryBuilders.boolQuery();

            benefitCategoryBoolQuery
                    .should(QueryBuilders.matchQuery("benefitCategory.benCatName", parentRuleRequest.getBenCat()));

            finalBoolQuery.must(benefitCategoryBoolQuery);
        }

        /**
         * plan filter
         */

		/*if (parentRuleRequest.getPlanIn() != null && !parentRuleRequest.getPlanIn().isEmpty()) {

			BoolQueryBuilder planBoolQuery = QueryBuilders.boolQuery();

			planBoolQuery
					.should(QueryBuilders.matchQuery("planType.planTypeName", parentRuleRequest.getPlanIn()));

			finalBoolQuery.must(planBoolQuery);

		}*/

        /**
         * cocSeries Filter
         */

		/*if (parentRuleRequest.getCocseriesIn() != null && !parentRuleRequest.getCocseriesIn().isEmpty()) {

			BoolQueryBuilder cocseriesBoolQuery = QueryBuilders.boolQuery();

			cocseriesBoolQuery.should(
					QueryBuilders.matchQuery("parentCocSeries.cocSeriesName", parentRuleRequest.getCocseriesIn()));

			finalBoolQuery.must(cocseriesBoolQuery);

		}*/

        /**
         * org Filter
         */

        if (parentRuleRequest.getOrgIn() != null && !parentRuleRequest.getOrgIn().isEmpty()) {

            BoolQueryBuilder orgBoolQuery = QueryBuilders.boolQuery();

            orgBoolQuery
                    .should(QueryBuilders.matchQuery("parentOrganization.orgName", parentRuleRequest.getOrgIn()));

            finalBoolQuery.must(orgBoolQuery);

        }

        /**
         * state Filter
         */

        if (parentRuleRequest.getStateIn() != null && !parentRuleRequest.getStateIn().isEmpty()) {
            List<String> statelist = new ArrayList<>();
            statelist.add(parentRuleRequest.getStateIn());
            statelist.add("AS"); //Consider parent rules with All States

            BoolQueryBuilder stateBoolQuery = QueryBuilders.boolQuery();
            for (String state : statelist) {
                stateBoolQuery.should(QueryBuilders.matchQuery("parentState.stateShortName", state));
            }

            finalBoolQuery.must(stateBoolQuery);

        }

        /**
         * segment Filter
         */

        if (parentRuleRequest.getSegmentIn() != null && !parentRuleRequest.getSegmentIn().isEmpty()) {

            BoolQueryBuilder segmentBoolQuery = QueryBuilders.boolQuery();

            segmentBoolQuery.should(
                    QueryBuilders.matchQuery("parentSegmentList.segmentShortName", parentRuleRequest.getSegmentIn()));

            finalBoolQuery.must(segmentBoolQuery);

        }

        /**
         * license Filter
         */

        if (parentRuleRequest.getLicenseIn() != null && !parentRuleRequest.getLicenseIn().isEmpty()) {

            BoolQueryBuilder licenseBoolQuery = QueryBuilders.boolQuery();

            licenseBoolQuery.should(
                    QueryBuilders.matchQuery("parentLicense.licenseShortName", parentRuleRequest.getLicenseIn()));

            finalBoolQuery.must(licenseBoolQuery);

        }

        /**
         * Status Filter
         */

        BoolQueryBuilder statusBoolQuery = QueryBuilders.boolQuery();
        statusBoolQuery.should(QueryBuilders.matchQuery("status", "Published"));
        finalBoolQuery.must(statusBoolQuery);

        searchSourceBuilder.query(finalBoolQuery);

        int start = 0;

        int recordsPerPage = 10;

        searchSourceBuilder.from(start);

        searchSourceBuilder.size(recordsPerPage);

        searchRequest.source(searchSourceBuilder);

        try {

            SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);

            SearchHit[] searchHit = searchResponse.getHits().getHits();

            ObjectMapper mapper = getObjectMapper();

            for (SearchHit hit : searchHit) {

                ParentRule parentRule = mapper.convertValue(hit.getSourceAsMap(), ParentRule.class);

                LibrarySearchResult librarySearchResult = convert(parentRule);

                if (librarySearchResult.getRuleId() != null) {

                    librarySearchList.add(librarySearchResult);
                }

            }

            Long totalRecords = searchResponse.getHits().getTotalHits().value;

            logger.info("Total  Records {} ", totalRecords);

            int count = recordsPerPage;

            while ((long) count < totalRecords) {

                searchSourceBuilder.from(count);

                searchSourceBuilder.size(recordsPerPage);

                searchRequest.source(searchSourceBuilder);

                searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);

                searchHit = searchResponse.getHits().getHits();

                mapper = getObjectMapper();

                for (SearchHit hit : searchHit) {

                    ParentRule parentRule = mapper.convertValue(hit.getSourceAsMap(), ParentRule.class);

                    LibrarySearchResult librarySearchResult = convert(parentRule);

                    if (librarySearchResult.getRuleId() != null) {

                        librarySearchList.add(librarySearchResult);
                    }

                }

                count = count + recordsPerPage;
            }

        } catch (Exception ex) {

            logger.error("Exception while reading the data from elastic search ex {}  ", ex);
        }

        return librarySearchList;

    }
can u rewrite all this code with new pom changes so that logic remains unchanged
