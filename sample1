@GetMapping(value = { "/create-parent", "/edit-parent" })
 public String showCreateParent(@RequestParam("ruleType") String ruleTypeText,
 @RequestParam(required = false, name = "parentID") Long parentID,
 @RequestParam(required = false, name = "clonedParentId") Long clonedParentId, ModelMap map,
 HttpSession session) {
 // parentID = 1L;
 Long newParentId = parentID;
 int ruleType = CoreUtils.convertStringToInteger(ruleTypeText);
 if (ruleType == 4 && clonedParentId != null && newParentId == null) {
 ParentRule newParentRule = parentRuleService.clone(ruleType, clonedParentId);
 newParentId = newParentRule.getParentID();
 map.put("oldRuleTitle", parentRuleService.getParentRuleTitle(clonedParentId));
 map.put("ruleTitle", newParentRule.getRuleTitle());
 } else if (clonedParentId != null && newParentId == null) {
 ParentRule newParentRule = parentRuleService.clone(ruleType, clonedParentId);
 newParentId = newParentRule.getParentID();
 map.put("oldRuleTitle", parentRuleService.getParentRuleTitle(clonedParentId));
 map.put("ruleTitle", newParentRule.getRuleTitle());
 } else {
 if (newParentId != null) {
 map.put("ruleTitle", parentRuleService.getParentRuleTitle(parentID));
 }
 }
 map.put("parentID", newParentId);
 map.put("ruleType", ruleType);

 map.put("clonedParentId", clonedParentId);
 String resultPage = "CreateParent";
 if (newParentId != null) {
 map.put("editFlag", Boolean.TRUE);
 } else {
 map.put("editFlag", Boolean.FALSE);
 }

 Object value = session.getAttribute("query");
 if (value != null) {
 String query = String.valueOf(value);
 if (StringUtils.isNotEmpty(query)) {
 map.put("query", query);
 }
 }
 return resultPage;
 }

 @PostMapping(value = { "/filterlibrary" })
 public String filterlib(@RequestParam("ruleType") Set<String> ruleTypes, ModelMap map, Model model,
 HttpServletRequest request, HttpSession session) {
 List<String> benCat = StringUtils.isNotBlank(request.getParameter("benCatIn"))
 ? Arrays.asList(request.getParameter("benCatIn").split(","))
 : new ArrayList<>();
 List<String> ruleCat = StringUtils.isNotBlank(request.getParameter("ruleCatIn"))
 ? Arrays.asList(request.getParameter("ruleCatIn").split(","))
 : new ArrayList<>();
 List<String> planIn = StringUtils.isNotBlank(request.getParameter("planIn"))
 ? Arrays.asList(request.getParameter("planIn").split(","))
 : new ArrayList<>();
 List<String> cocseriesIn = StringUtils.isNotBlank(request.getParameter("cocseriesIn"))
 ? Arrays.asList(request.getParameter("cocseriesIn").split(","))
 : new ArrayList<>();
 List<String> orgIn = StringUtils.isNotBlank(request.getParameter("orgIn"))
 ? Arrays.asList(request.getParameter("orgIn").split(","))
 : new ArrayList<>();
 List<String> stateIn = StringUtils.isNotBlank(request.getParameter("stateIn"))
 ? Arrays.asList(request.getParameter("stateIn").split(","))
 : new ArrayList<>();
 List<String> segmentIn = StringUtils.isNotBlank(request.getParameter("segmentIn"))
 ? Arrays.asList(request.getParameter("segmentIn").split(","))
 : new ArrayList<>();
 List<String> licenseIn = StringUtils.isNotBlank(request.getParameter("licenseIn"))
 ? Arrays.asList(request.getParameter("licenseIn").split(","))
 : new ArrayList<>();
 String tabSelect = request.getParameter("tabSelect");
 String libraryName = request.getParameter("libraryName");
 String action = request.getParameter("action");
 String currPage = request.getParameter("currentPage");

 String incremSlideStr = request.getParameter("incremSlide");

 if (StringUtils.isNoneBlank(libraryName) && StringUtils.equalsIgnoreCase("buildYourOwnView", libraryName)
 && (ruleTypes == null || ruleTypes.isEmpty())) {

 map.put("ruleTypes", com.optum.eni.core.constants.ParentType.values());
 model.addAttribute("ruleTypes", com.optum.eni.core.constants.ParentType.values());

 populateFilters(model, libraryName);
 List<LibrarySearchResult> librarySearchResults = new ArrayList<>();
 // Passing null object in the list, if librarySearchResults is empty
 LibrarySearchResult librarySearchResult = new LibrarySearchResult();
 librarySearchResults.add(librarySearchResult);
 model.addAttribute("standardsLibrary", librarySearchResults);
 session.setAttribute("standardLibExportData", librarySearchResults);
 // session.setAttribute("ruleDescMapExportData", ruleIdDescMap);

 model.addAttribute("query", "");
 session.setAttribute("query", null);

 logger.info("Pg AccessLog Service search started.........");
 pgAccessLogService.saveLog(null, request);

 String userName = parentRuleService.getCurrentUserName();
 Long userId = parentRuleService.getUserIdByUserName(userName);
 Users user = authenticationService.getUserByUserID(userId.intValue());

 logger.info("Pg AccessLog Service search ended.........");

 session.setAttribute(CoreSessionConstants.roleId, user.getRoleID());
 model.addAttribute(CoreSessionConstants.roleId, user.getRoleID());
 model.addAttribute("totalRecord", 0);
 model.addAttribute("currentPage", 1);
 model.addAttribute("rowsPerPage", 8);
 model.addAttribute("incremSlide", 5);
 model.addAttribute("libraryName", libraryName);
 map.put("libraryName", libraryName);
 } else {

 int incremSlide = 5;

 if (StringUtils.isNoneBlank(incremSlideStr)) {

 incremSlide = Integer.valueOf(incremSlideStr);
 }

 int recordsPerPage = 8;

 int currentPage = 1;

 if (StringUtils.isNoneBlank(currPage)) {

 currentPage = Integer.valueOf(currPage);

 }
 if (incremSlide <= 0 || incremSlide >= Integer.MAX_VALUE / 10) {
 incremSlide = 5;
 }

 if ("prev".equalsIgnoreCase(action)) {

 if (currentPage >= incremSlide) {
 currentPage = incremSlide - 4;
 }
 }
// if ("prev".equalsIgnoreCase(action)) {
//
// if (currentPage >= incremSlide) {
// if (incremSlide < Integer.MAX_VALUE / 10) {
// currentPage = incremSlide - 4;
// }
// }
//
// }

 List<String> collectors = new ArrayList<>();

 if (ruleTypes != null) {

 for (String ruleType : ruleTypes) {

 if (StringUtils.isNoneBlank(ruleType)) {

 String[] roleIds = ruleType.split(",");

 for (String roleId : roleIds) {
 collectors.add(roleId);
 }

 }
 }

 }

 if (StringUtils.isNoneBlank(tabSelect) && tabSelect.equalsIgnoreCase("condensed-view-option")) {

 recordsPerPage = 24;
 }

 if ("Last".equals(action)) {

 String standardsLibrarySize = request.getParameter("standardsLibrarySize");

 if (StringUtils.isNoneEmpty(standardsLibrarySize)) {

 int totalPage = Integer.parseInt(standardsLibrarySize);

 double pageNo = totalPage / recordsPerPage;

 if (pageNo == Math.floor(pageNo)) {

 pageNo = Math.floor(pageNo);

 } else {

 pageNo = Math.floor(pageNo) + 1;

 }

 currentPage = (int) pageNo + 1;
 incremSlide = currentPage;
 }

 }

 List<LibrarySearchResult> librarySearchResults = new ArrayList<>();
 ParentRuleSearchResponse parentRuleSearchResponse = null;
 String searchQuery = request.getParameter("query");
 model.addAttribute("query", searchQuery);

 boolean predicate = CollectionUtils.isNotEmpty(ruleTypes) && ruleTypes.size() == 1 && ruleTypes.stream()
 .anyMatch(rt -> StringUtils.isNotBlank(searchQuery) && StringUtils.equalsIgnoreCase("0", "0"));

 if (predicate) {
 librarySearchResults = parentRuleSearchService.search(searchQuery);
 } else {
 parentRuleSearchResponse = parentRuleSearchService.findBy(collectors, benCat, ruleCat, planIn,
 cocseriesIn, orgIn, stateIn, segmentIn, licenseIn, currentPage, recordsPerPage, action);
 librarySearchResults = parentRuleSearchResponse.getResult();
 }
 librarySearchResults.sort(Comparator.comparing(LibrarySearchResult::getRuleId).reversed());

 Map<Long, String> ruleIdDescMap = librarySearchResults.stream()
 .collect(HashMap<Long, String>::new,
 (m, c) -> m.put(c.getRuleId(),
 c.getRuleTypeId() != null && c.getRuleTypeId() == 4
 ? c.getFieldRangesProdTypeRuleCat()
 : Jsoup.parse(StringUtils.isNotEmpty(c.getRuleDescription())
 ? c.getRuleDescription()
 : c.getBody() != null ? c.getBody().size() > 3 ? c.getBody().get(0)
 + c.getBody().get(1) + c.getBody().get(2) : "" : "")
 .text().toString()),
 (m, u) -> {
 });

 Map<String, String> statesMap = parentRuleSearchService.getAllStates().stream().collect(
 HashMap<String, String>::new, (m, c) -> m.put(c.getStateAbbr(), c.getStateDesc()), (m, c) -> {
 });

 populateFilters(model, libraryName);
 model.addAttribute("ruleDescMap", ruleIdDescMap);
 model.addAttribute("statesMap", statesMap);
 if (StringUtils.isEmpty(tabSelect)) {
 tabSelect = "detailed-view-option";
 }
 model.addAttribute("tabSelect", tabSelect);

 if (StringUtils.isNoneBlank(libraryName) && StringUtils.equalsIgnoreCase("buildYourOwnView", libraryName)) {
 map.put("ruleTypes", com.optum.eni.core.constants.ParentType.values());
 model.addAttribute("ruleTypes", com.optum.eni.core.constants.ParentType.values());
 }

 if (!StringUtils.equalsIgnoreCase("buildYourOwnView", libraryName) && ruleTypes != null) {

 String value = StringUtils.join(ruleTypes, ',');
 map.put("ruleType", value);
 model.addAttribute("ruleType", value);
 } else {
 map.put("ruleType", ruleTypes);
 model.addAttribute("ruleType", ruleTypes);
 }

 model.addAttribute("standardsLibrary", librarySearchResults);
 session.setAttribute("standardLibExportData", librarySearchResults);
 model.addAttribute("benCat", benCat);
 model.addAttribute("ruleCat", ruleCat);
 model.addAttribute("planIn", planIn);
 model.addAttribute("cocseriesIn", cocseriesIn);
 model.addAttribute("orgIn", orgIn);
 model.addAttribute("stateIn", stateIn);
 model.addAttribute("segmentIn", segmentIn);
 model.addAttribute("licenseIn", licenseIn);

 model.addAttribute("query", "");
 session.setAttribute("query", null);
 if (StringUtils.isNotBlank(searchQuery)) {
 model.addAttribute("query", searchQuery);
 }

 model.addAttribute("libraryName", libraryName);
 map.put("libraryName", libraryName);
 // pgAccessLogService.saveLog(null, request);

 model.addAttribute("currentPage", currentPage);
 model.addAttribute("rowsPerPage", recordsPerPage);

 double pageNo = parentRuleSearchResponse != null
 ? parentRuleSearchResponse.getTotalRecords() / recordsPerPage
 : 0;

 if (pageNo == Math.floor(pageNo)) {

 pageNo = Math.floor(pageNo);

 } else {

 pageNo = Math.floor(pageNo) + 1;

 }

 int totalPage = (int) pageNo;

 if (incremSlide > totalPage) {

 incremSlide = totalPage + 1;

 }

 model.addAttribute("incremSlide", incremSlide);
 model.addAttribute("totalRecord",
 parentRuleSearchResponse != null ? parentRuleSearchResponse.getTotalRecords() : 0);
 model.addAttribute("action", action);
 }
 return "StandardsLibrary";
 }

 @GetMapping(value = { "/view-parent" })
 public String showViewParent(@RequestParam("ruleType") Integer ruleType,
 @RequestParam(required = false, name = "parentID") Long parentID,
 @RequestParam(required = false, name = "ruleTitle") String ruleTitle,
 @RequestParam(required = false, name = "clonedParentId") Long clonedParentId, ModelMap map,
 HttpSession session) {
 Long newParentId = parentID;
 if (ruleType == 4 && clonedParentId != null && newParentId == null) {
 ParentRule newParentRule = parentRuleService.clone(ruleType, clonedParentId);
 newParentId = newParentRule.getParentID();
 map.put("oldRuleTitle", ruleTitle);
 map.put("ruleTitle", newParentRule.getRuleTitle());
 } else {
 map.put("ruleTitle", ruleTitle);
 }
 map.put("parentID", newParentId);
 map.put("ruleType", ruleType);

 map.put("clonedParentId", clonedParentId);
 String resultPage = "ViewParent";
 if (newParentId != null) {
 map.put("editFlag", Boolean.TRUE);
 } else {
 map.put("editFlag", Boolean.FALSE);
 }

 Object value = session.getAttribute("query");
 if (value != null) {
 String query = String.valueOf(value);
 if (StringUtils.isNotEmpty(query)) {
 map.put("query", query);
 }
 }
return resultPage;
}
serviceimpl codes

@Override
publicParentRuleclone(IntegerruleType,LongclonedParentId){
ParentRulenewParentRule=null;
Optional<ParentRule>optional=parentRuleRepository.findById(clonedParentId);
if(optional.isPresent()){
newParentRule=optional.get();
newParentRule.setParentID(null);
}else{
newParentRule=newParentRule();
}
parentRuleRepository.save(newParentRule);

LongnewParentId=newParentRule.getParentID();
cloneParentCOCSeries(newParentId,clonedParentId);
cloneParentOrg(newParentId,clonedParentId);
cloneParentSegment(newParentId,clonedParentId);
cloneParentLicense(newParentId,clonedParentId);
cloneParentAppliesTo(newParentId,clonedParentId);
cloneParentFiledRangesProduct(newParentId,clonedParentId);

newThread(){
@Override
publicvoidrun(){
migrateService.saveParentRule(newParentId);
}
}.start();

returnnewParentRule;
}

privatevoidcloneParentCOCSeries(LongnewParentID,LongclonedParentId){
List<ParentCocSeries>parentCocSeries=parentCocSeriesRepository.findAllByParentID(clonedParentId);
parentCocSeries.forEach(cocSeries->{
cocSeries.setParentCOCID(null);
cocSeries.setParentID(newParentID);
});
parentCocSeriesRepository.saveAll(parentCocSeries);
}

privatevoidcloneParentOrg(LongnewParentID,LongclonedParentId){
List<ParentOrganization>parentOrganizations=parentOrganizationRepository.findAllByParentID(clonedParentId);
parentOrganizations.forEach(parentOrg->{
parentOrg.setParentOrgID(null);
parentOrg.setParentID(newParentID);
});
parentOrganizationRepository.saveAll(parentOrganizations);
}

privatevoidcloneParentSegment(LongnewParentID,LongclonedParentId){
List<ParentSegment>parentSegments=parentSegmentRepository.findAllByParentID(clonedParentId);
parentSegments.forEach(parentSegment->{
parentSegment.setParentSegmentID(null);
parentSegment.setParentID(newParentID);
});
parentSegmentRepository.saveAll(parentSegments);
}

privatevoidcloneParentLicense(LongnewParentID,LongclonedParentId){
List<ParentLicense>parentLicenses=parentLicenseRepository.findAllByParentID(clonedParentId);
parentLicenses.forEach(parentLicense->{
parentLicense.setParentLicenseID(null);
parentLicense.setParentID(newParentID);
});
parentLicenseRepository.saveAll(parentLicenses);
}

privatevoidcloneParentAppliesTo(LongnewParentID,LongclonedParentId){
List<ParentAppliesTo>parentAppliesTos=parentAppliesToRepository.findAllByParentID(clonedParentId);
parentAppliesTos.forEach(parentAppliesTo->{
parentAppliesTo.setParentAppliesToID(null);
parentAppliesTo.setParentID(newParentID);
});
parentAppliesToRepository.saveAll(parentAppliesTos);
}

privatevoidcloneParentFiledRangesProduct(LongnewParentID,LongclonedParentId){
List<FiledRangesProduct>filedRangesProducts=filedRangesProductRepository.findByParentID(clonedParentId);
filedRangesProducts.forEach(filedRangesProduct->{
FiledRangesProductnewFiledRangesProduct=filedRangesProduct;
longfiledRangesProductID=filedRangesProduct.getFiledRangesProductID();
newFiledRangesProduct.setFiledRangesProductID(null);
newFiledRangesProduct.setParentID(newParentID);
filedRangesProductRepository.save(newFiledRangesProduct);

cloneCostShareRanges(newParentID,newFiledRangesProduct.getFiledRangesProductID(),filedRangesProductID);
cloneLimitRanges(newParentID,newFiledRangesProduct.getFiledRangesProductID(),filedRangesProductID);
});
}

privatevoidcloneCostShareRanges(LongnewParentId,LongnewFiledRangesProductId,LongclonedFiledRangesProductID){
List<CostShareRanges>costShareRanges=costShareRangesRepository
.findByFiledRangesProductID(clonedFiledRangesProductID);
//costShareRanges.forEach(costShareRange->{
for(inti=0;i<costShareRanges.size();i++){
costShareRanges.get(i).setSequenceNo((long)i);
costShareRanges.get(i).setCostShareRangeID(null);
costShareRanges.get(i).setFiledRangesProductID(newFiledRangesProductId);
costShareRanges.get(i).setParentID(newParentId);
//});
}
costShareRangesRepository.saveAll(costShareRanges);
}

privatevoidcloneLimitRanges(LongnewParentId,LongnewFiledRangesProductId,LongclonedFiledRangesProductID){
List<LimitRanges>limitRanges=limitRangesRepository.findByFiledRangesProductID(clonedFiledRangesProductID);
//limitRanges.forEach(limitRange->{
for(inti=0;i<limitRanges.size();i++){
limitRanges.get(i).setLimitRangesID(null);
limitRanges.get(i).setFiledRangesProductID(newFiledRangesProductId);
limitRanges.get(i).setParentID(newParentId);
limitRanges.get(i).setSequenceNo((long)i);
}
limitRangesRepository.saveAll(limitRanges);
}
