import os
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import openai
import shutil
# Load environment variables from .env
load_dotenv()
# Initialize OpenAI Azure client
client = openai.AzureOpenAI(
   api_key=os.getenv("AZURE_OPENAI_API_KEY"),
   api_version="2023-07-01-preview",
   azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
)
app = FastAPI()
# Enable CORS for frontend communication
app.add_middleware(
   CORSMiddleware,
   allow_origins=["*"],  # Change this to your frontend URL in production
   allow_credentials=True,
   allow_methods=["*"],
   allow_headers=["*"],
)
# Temporary storage for uploaded files
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)
uploaded_text = ""
@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
   if not file:
       raise HTTPException(status_code=400, detail="No file uploaded")
   try:
       file_location = os.path.join(UPLOAD_DIR, file.filename)
       # Save the uploaded file
       with open(file_location, "wb") as f:
           f.write(await file.read())
       return {"filename": file.filename, "message": "File uploaded successfully"}
   except Exception as e:
       raise HTTPException(status_code=500, detail=f"File upload failed: {str(e)}")

@app.post("/chat/")
async def chat(user_query: dict):
   global uploaded_text
   if not uploaded_text:
       raise HTTPException(status_code=400, detail="No document uploaded. Please upload a document first.")
   try:
       response = client.chat_completions.create(
           model="gpt-4",  # Change to your Azure deployment model
           messages=[
               {"role": "system", "content": "You are a helpful assistant. Answer questions based on the uploaded document."},
               {"role": "user", "content": f"Document: {uploaded_text}"},
               {"role": "user", "content": user_query["question"]}
           ],
           temperature=0.5
       )
       return {"response": response.choices[0].message.content}
   except Exception as e:
       raise HTTPException(status_code=500, detail=f"Chat API error: {str(e)}")

this is my main.py code
