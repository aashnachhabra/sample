import os
import shutil
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import openai
from openai import ChatCompletion
import fitz  # PyMuPDF for PDF text extraction
# Load environment variables from .env
load_dotenv()
# Initialize OpenAI Azure client
# client = openai.AzureOpenAI(
#    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
#    api_version="2023-07-01-preview",
#    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
# )
openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")
openai.api_base = os.getenv("AZURE_OPENAI_ENDPOINT")
app = FastAPI()

# Enable CORS for frontend communication
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Change this to your frontend URL in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Temporary storage for uploaded files
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)
uploaded_text = ""  # Store extracted text from uploaded file

@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    """Handles file uploads and extracts text from PDFs or text files."""
    global uploaded_text
    if not file:
        raise HTTPException(status_code=400, detail="No file uploaded")
    try:
        file_location = os.path.join(UPLOAD_DIR, file.filename)
        # Save the uploaded file
        with open(file_location, "wb") as f:
            shutil.copyfileobj(file.file, f)
        # Extract text based on file type
        if file.filename.endswith(".pdf"):
            uploaded_text = extract_text_from_pdf(file_location)
        else:
            with open(file_location, "r", encoding="utf-8", errors="ignore") as f:
                uploaded_text = f.read()
        return {"filename": file.filename, "message": "File uploaded successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"File upload failed: {str(e)}")

def extract_text_from_pdf(pdf_path):
    """Extracts text from a PDF file."""
    text = ""
    try:
        doc = fitz.open(pdf_path)
        for page in doc:
            text += page.get_text("text")  # Extract text from each page
        return text.strip()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to extract text from PDF: {str(e)}")

@app.post("/chat/")
async def chat(user_query: dict):
    """Handles chat requests and generates responses using OpenAI API."""
    global uploaded_text
    if not uploaded_text:
        raise HTTPException(status_code=400, detail="No document uploaded. Please upload a document first.")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # Ensure this matches your deployment name
            messages=[
                {"role": "system", "content": "You are a helpful assistant. Answer questions based on the uploaded document."},
                {"role": "user", "content": f"Document: {uploaded_text}"},
                {"role": "user", "content": user_query["query"]},
            ],
            temperature=0.5
        )
        return {"response": response.choices[0].message.content}
    except Exception as e:
        print(f"Chat API error: {str(e)}")  # Add logging here
        raise HTTPException(status_code=500, detail=f"Chat API error: {str(e)}")

i am getting 500 error in /chat api with response
{"detail":"Chat API error: Resource not found"}
payload
{query: "hi"}
