package com.optum.eni.core.database.mysql.domain;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;

import com.optum.eni.core.model.ParentRuleChangeLog;
import com.optum.eni.core.mongodb.domain.ChildRule;
import com.optum.eni.core.mongodb.domain.RuleCondition;

import lombok.Data;

@SuppressWarnings("serial")
@Entity
@Table(name = "parentrules", schema = "core03")
@Data
public class ParentRule implements Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
	@GenericGenerator(name = "native", strategy = "native")
	@Column(name = "parentID")
	private Long parentID;
	@Column(name = "ruleTitle")
	private String ruleTitle;
	@Column(name = "stateID", nullable = true)
	private Long stateID;
	@Column(name = "statusID")
	private Long statusID;
	@Column(name = "parentName")
	private String parentName;
	@Column(name = "benCatID")
	private Long benCatID;
	@Column(name = "parentTypeID")
	private Long parentTypeID;
	@Column(name = "planTypeID")
	private Long planTypeID;
	@Column(name = "createdBy")
	private Long createdBy;
	@Column(name = "createdDate")
	private Timestamp createdDate;
	@Column(name = "isCurrent", columnDefinition = "BIT")
	private Integer isCurrent;
	@Column(name = "parentDesc")
	private String parentDesc;
	@Column(name = "effectiveDate")
	private Timestamp effectiveDate;
	@Column(name = "ineffectiveDate")
	private Timestamp ineffectiveDate;

	@Transient
	private Long parentDescId;
	@Transient
	private String stateShortName;
	@Transient
	private String statusName;
	@Transient
	private List<ParentDescription> parentDescriptionList;
	@Transient
	private List<ParentCocSeries> parentCocSeriesList;
	@Transient
	private List<ParentLicense> parentLicenseList;
	@Transient
	private List<ParentOrganization> parentOrganizationList;
	@Transient
	private List<ParentSegment> parentSegmentList;
	@Transient
	private List<ParentAppliesTo> appliesToList;
	@Transient
	private List<ParentState> parentStateList;
	@Transient
	private Long[] cocSeriesSelected;
	@Transient
	private Long[] licenseSelected;
	@Transient
	private Long[] organizationSelected;
	@Transient
	private Long[] segmentSelected;
	@Transient
	private Long[] appliesToSelected;
	@Transient
	private Long[] stateSelected;
	@Transient
	private List<ParentRuleChangeLog> parentChangeLogList;
	@Transient
	private List<Resource> resources;
	@Transient
	private List<ChangeLog> changeLogs;
	@Transient
	private List<FiledRangesProduct> filedRangesProduct;
	@Transient
	private List<RuleHeaderDetails> ruleHeaderDetails;
	@Transient
	private List<FunctionalAreaConfigDetails> functionalAreaConfigDetails;
	@Transient
	private List<ServiceCodes> serviceCodes;
	@Transient
	private String majorOrMinor;
	@Transient
	private List<ChildRule> childRules;
	@Transient
	private RuleCondition childRuleWhenCondition;

}
package com.optum.eni.core.mongodb.domain;

import com.optum.eni.core.constants.CoreCollectionConstants;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.optum.eni.core.json.serializer.RuleConditionDeserializer;
import com.optum.eni.core.json.serializer.RuleConditionSerializer;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Document(CoreCollectionConstants.CHILD_RULES_COLLECTION)
@Getter
@Setter
@NoArgsConstructor
@ToString
public class ChildRule {

	@Id
	private String id;

	@JsonProperty("prevChildRuleId")
	private String prevChildRuleId;

	@JsonProperty("originalChildRuleId")
	private String originalChildRuleId;

	@JsonProperty("parentRuleId")
	private Long parentRuleId;

	@JsonProperty("sourceSystem")
	private String sourceSystem;

	@JsonProperty("sourceConfiguration")
	private String sourceConfiguration;

	@JsonProperty("isSourceConfigurationChanged")
	private boolean isSourceConfigurationChanged;

	@Transient
	private String sourceConfigurationName;

	@JsonProperty("ruleTitle")
	private String ruleTitle;

	@JsonProperty("ruleType")
	private String ruleType;

	@JsonProperty("ruleDescription")
	private String ruleDescription;

	@JsonProperty("isCurrent")
	private boolean isCurrent;

	@JsonProperty("version")
	private int version;

	@JsonProperty("when")
	@JsonDeserialize(using = RuleConditionDeserializer.class)
	@JsonSerialize(using = RuleConditionSerializer.class)
	private RuleCondition ruleLogicWhen;

	@JsonProperty("then")
	@JsonDeserialize(using = RuleConditionDeserializer.class)
	@JsonSerialize(using = RuleConditionSerializer.class)
	private RuleCondition ruleLogicThen;

	public ChildRule(ChildRule childRule) {
		parentRuleId = childRule.parentRuleId;
		sourceSystem = childRule.sourceSystem;
		sourceConfiguration = childRule.sourceConfiguration;
		ruleTitle = childRule.ruleTitle;
		ruleType = childRule.ruleType;
		ruleDescription = childRule.ruleDescription;
		ruleLogicWhen = childRule.ruleLogicWhen;
		ruleLogicThen = childRule.ruleLogicThen;
	}

}
