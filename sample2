here are js functions
function changeDefault() {
            var defaultBusiness = "${pageContext.session.getAttribute('defaultBusiness')}";
            var dd = document.getElementById("defaultLineOfBusiness");
            dd.selectedIndex = [...dd.options].findIndex (option => option.text === defaultBusiness);
            $("#defaultBusinessModal").show();
        }

        function setDefault() {
            var defaultBusiness = "${pageContext.session.getAttribute('defaultBusiness')}";
            if(defaultBusiness == null || defaultBusiness == '') {
                $("#defaultBusinessModal").show();
            } else {
                var dd = document.getElementById("lineOfBusiness");
                dd.selectedIndex = [...dd.options].findIndex (option => option.text === defaultBusiness);
                enableAndDisableCards();
            }
        }

        function hideModal() {
            $("#defaultBusinessModal").removeClass("in");
            $(".modal-backdrop").remove();
            $("#defaultBusinessModal").hide();
        }

        function setDefaultBusiness() {
            let defaultBusiness = $('#defaultLineOfBusiness option:selected').text();
            $.ajax({
                type: "GET",
                contentType: "application/json",
                url: "updateDefaultBusiness?defaultBusiness=" + encodeURIComponent(defaultBusiness),
                success: function (res) {
                    hideModal();
                    location.reload();
                },
                error: function (xhr) {
                    hideModal();
                    console.log(xhr);
                    alert("Error while updating default Business");
                }
            });
        }
controller
package com.uhc.ei.planlibrary.controller;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.uhc.ei.planlibrary.constants.SessionConstants;
import com.uhc.ei.planlibrary.service.HomeService;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.owasp.encoder.Encode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import com.uhc.ei.planlibrary.kafka.publisher.PublishMedicalLibraryCollection;
import com.uhc.ei.planlibrary.mongodb.domain.TicPlanData;
import com.uhc.ei.planlibrary.mongodb.repo.TicPlanDataRepository;

import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Controller
public class HomeController {

	@Autowired
	private TicPlanDataRepository ticPlanDataRepository;
	
	@Autowired
	private PublishMedicalLibraryCollection publishMedicalLibraryCollection;

	@Autowired
	private HomeService homeService;

	@RequestMapping("/")
	public String home(ModelMap map, HttpSession session) {
		TicData data = new TicData();
		data.setSourceSystem("Test");
		return "home";
	}

	@RequestMapping("/Tic")
	@ResponseBody
	public List<TicPlanData> getTicData(Model model, HttpSession session) {
		List<TicPlanData> list = ticPlanDataRepository.findAll();
		return list;
	}

	@PostMapping(value = { "/UpdateTic" })
	@ResponseBody
	public String update(Model model, HttpSession session, @RequestBody TicData ticData) {
		TicPlanData data = ticPlanDataRepository.findBySourceSystem(ticData.getSourceSystem());
		if (ticData.getNextRunDate() != null && ticData.getNextRunDate().length() > 0) {
			if (isDateFuture(ticData.getNextRunDate(), "yyyy-MM-dd")) {
				data.setNextScheduledLoadDate(ticData.getNextRunDate());
				data.setEmail(ticData.getEmail());
				data.setUserName(ticData.getUserName());
				data.setUpdatedOn(new DateTime().toString());
				ticPlanDataRepository.save(data);
				return "Reload";
			} else {
				return "R";
			}
		}
		return "Reload";
	}

	@PostMapping(value = { "/runTic" })
	@ResponseBody
	public String run(Model model, HttpSession session, @RequestBody TicData ticData) {
		TicPlanData data = ticPlanDataRepository.findBySourceSystem(ticData.getSourceSystem());
		data.setEmail(ticData.getEmail());
		data.setUserName(ticData.getUserName());
		if (data.getStatus().equals("Run")) {
			return "R";
		}
		data.setStatus("Run");
		ticPlanDataRepository.save(data);
		data.setUpdatedOn(new DateTime().toString());
		return "Reload";
	}

	@PostMapping(value = { "/removeTic" })
	public String remove(Model model, HttpSession session, @RequestBody TicData ticData) {
		TicPlanData data = ticPlanDataRepository.findBySourceSystem(ticData.getSourceSystem());
		if (data.getNextScheduledLoadDate() != null && data.getNextScheduledLoadDate().length() > 0) {
			LocalDate currentDate = LocalDate.now();
			int dayOfMonth = currentDate.getDayOfMonth();
			int month = currentDate.getMonthValue();
			int y = currentDate.getYear();
			String date = "";
			if (dayOfMonth <= 24) {
				date = y + "-" + month + "-" + "24";
			} else {
				month = month + 1;
				date = y + "-" + month + "-" + "24";
			}
			data.setNextScheduledLoadDate(date);
			data.setEmail(ticData.getEmail());
			data.setUserName(ticData.getUserName());
			data.setUpdatedOn(new DateTime().toString());
			ticPlanDataRepository.save(data);
		}
		return "Reload";
	}

	public static boolean isDateFuture(final String date, final String dateFormat) {
		LocalDate localDate = LocalDate.now(ZoneId.systemDefault());
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern(dateFormat);
		LocalDate inputDate = LocalDate.parse(date, dtf);

		return inputDate.isAfter(localDate);
	}

	@RequestMapping("/RuleManagement")
	public String ruleManagement() {
		return "RuleManagement";
	}

	@RequestMapping("/TemplateManagement")
	public String templateManagement() {
		return "TemplateManagement";
	}
	
	
	@CrossOrigin
	@PostMapping(value = "/publish/medicalLibrary", name = "Publish MedicalLibrary API Collection records", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Ok/Success.The requested resource was created successfully."),
			@ApiResponse(code = 400, message = "Bad Request. Incorrect header or junk request data."),
			@ApiResponse(code = 500, message = "Internal Server Error.") })
	public ResponseEntity<List<ResponseCommand>> publisMedicalLibraryh(Model model, HttpSession session, @RequestBody List<RequestCommand> commands) {

		return ResponseEntity.status(HttpStatus.OK).body(this.publishMedicalLibraryCollection.publisMedicalLibraryh(commands));
		
	}

	private String validateRequest(String defaultBusiness) {
		if (StringUtils.isNotEmpty(defaultBusiness)) {
			return Encode.forJava(defaultBusiness);
		} else {
			return null;
		}
	}

	@GetMapping("/updateDefaultBusiness")
	@ResponseBody
	public ResponseEntity<Object> updateDataPointerStatus(HttpServletRequest request, @RequestParam("defaultBusiness") String defaultBusiness) {
		HttpSession session = request.getSession();
		String username = (String) session.getAttribute(SessionConstants.USER_NAME);
		homeService.updateDefaultBusiness(username, defaultBusiness);
		if(defaultBusiness != null && validBusiness(defaultBusiness)) {
			session.setAttribute(SessionConstants.DEFAULT_BUSINESS, validateRequest(defaultBusiness));
		}
		return ResponseEntity.status(HttpStatus.OK).body("Successfully updated Default Business");
	}

	private boolean validBusiness(String business){
		return business.matches("[a-zA-Z0-9]+");
	}
}
